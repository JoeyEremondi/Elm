Constraining exprssion Case (At (Region {_start = Position {_line = 29, _column = 8}, _end = Position {_line = 29, _column = 12}}) (VarLocal (Name {_name = "list"}))) [CaseBranch (At (Region {_start = Position {_line = 31, _column = 6}, _end = Position {_line = 31, _column = 16}}) (PCons (At (Region {_start = Position {_line = 31, _column = 6}, _end = Position {_line = 31, _column = 10}}) (PVar (Name {_name = "only"}))) (At (Region {_start = Position {_line = 31, _column = 14}, _end = Position {_line = 31, _column = 16}}) (PList [])))) (At (Region {_start = Position {_line = 31, _column = 21}, _end = Position {_line = 31, _column = 25}}) (VarLocal (Name {_name = "list"})))]
Constraining exprssion VarLocal (Name {_name = "list"})
Instantiating Forall [] (TypeVar (Name {_name = "a"}) :@ (SetVar_ SetVar_5)) (CEqual_ (SetVar_ SetVar_5) (SetVar_ SetVar_18)) into (TypeVar (Name {_name = "a"}) :@ (SetVar_ SetVar_5),(CEqual_ (SetVar_ SetVar_5) (SetVar_ SetVar_18))) for var list
Unifying typesApp (Canonical {_package = Name {_author = "elm", _project = "core"}, _module = Name {_name = "List"}}) (Name {_name = "List"}) [TypeVar (Name {_name = "a"}) :@ (SetVar_ SetVar_8)] :@ (SetVar_ SetVar_9)
  and TypeVar (Name {_name = "a"}) :@ (SetVar_ SetVar_5)
Constraining exprssion VarLocal (Name {_name = "list"})
Instantiating Forall [] (TypeVar (Name {_name = "a"}) :@ (SetVar_ SetVar_5)) (CEqual_ (SetVar_ SetVar_5) (SetVar_ SetVar_18)) into (TypeVar (Name {_name = "a"}) :@ (SetVar_ SetVar_5),(CEqual_ (SetVar_ SetVar_5) (SetVar_ SetVar_18))) for var list
Unifying typesApp (Canonical {_package = Name {_author = "elm", _project = "core"}, _module = Name {_name = "List"}}) (Name {_name = "List"}) [TypeVar (Name {_name = "a"}) :@ (SetVar_ SetVar_13)] :@ (SetVar_ SetVar_14)
  and TypeVar (Name {_name = "a"}) :@ (SetVar_ SetVar_5)
Solving constraints for definition foo
Got safety constraints [(CSubset_ (SetVar_ SetVar_5) (Ctor_ "--Cons" [(Top_),(Ctor_ "--Null" [])]))]
Initial list:
[(CEqual_ (SetVar_ SetVar_5) (SetVar_ SetVar_18)),(CSubset_ (SetVar_ SetVar_16) (SetVar_ SetVar_20)),(CAnd_ [(CImplies_ (CSubset_ (Intersect_ (SetVar_ SetVar_5) (Ctor_ "--Cons" [(Top_),(Ctor_ "--Null" [])])) (Bottom_)) (CEqual_ (SetVar_ SetVar_20) (Bottom_))),(CImplies_ (CNot_ (CSubset_ (Intersect_ (SetVar_ SetVar_5) (Ctor_ "--Cons" [(Top_),(Ctor_ "--Null" [])])) (Bottom_))) (CSubset_ (SetVar_ SetVar_5) (SetVar_ SetVar_20))),(CEqual_ (SetVar_ SetVar_5) (SetVar_ SetVar_18)),(CEqual_ (Ctor_ "--Cons" [(SetVar_ projVar_21_1),(SetVar_ projVar_21_2)]) (Intersect_ (SetVar_ SetVar_5) (Ctor_ "--Cons" [(Top_),(Top_)]))),(CIff_ (CEqual_ (SetVar_ projVar_21_1) (Bottom_)) (CEqual_ (Intersect_ (SetVar_ SetVar_5) (Ctor_ "--Cons" [(Top_),(Top_)])) (Bottom_))),(CIff_ (CEqual_ (SetVar_ projVar_21_2) (Bottom_)) (CEqual_ (Intersect_ (SetVar_ SetVar_5) (Ctor_ "--Cons" [(Top_),(Top_)])) (Bottom_))),(CTrue_),(CTrue_)])]
After subbed:
[(CEqual_ (SetVar_ SetVar_5) (SetVar_ SetVar_18)),(CSubset_ (SetVar_ SetVar_16) (SetVar_ SetVar_20)),(CAnd_ [(CImplies_ (CSubset_ (Intersect_ (SetVar_ SetVar_5) (Ctor_ "--Cons" [(Top_),(Ctor_ "--Null" [])])) (Bottom_)) (CEqual_ (SetVar_ SetVar_20) (Bottom_))),(CImplies_ (CNot_ (CSubset_ (Intersect_ (SetVar_ SetVar_5) (Ctor_ "--Cons" [(Top_),(Ctor_ "--Null" [])])) (Bottom_))) (CSubset_ (SetVar_ SetVar_5) (SetVar_ SetVar_20))),(CEqual_ (SetVar_ SetVar_5) (SetVar_ SetVar_18)),(CEqual_ (Ctor_ "--Cons" [(SetVar_ projVar_21_1),(SetVar_ projVar_21_2)]) (Intersect_ (SetVar_ SetVar_5) (Ctor_ "--Cons" [(Top_),(Top_)]))),(CIff_ (CEqual_ (SetVar_ projVar_21_1) (Bottom_)) (CEqual_ (Intersect_ (SetVar_ SetVar_5) (Ctor_ "--Cons" [(Top_),(Top_)])) (Bottom_))),(CIff_ (CEqual_ (SetVar_ projVar_21_2) (Bottom_)) (CEqual_ (Intersect_ (SetVar_ SetVar_5) (Ctor_ "--Cons" [(Top_),(Top_)])) (Bottom_))),(CTrue_),(CTrue_)])]
After opt:
[(CSubset_ (SetVar_ SetVar_16) (SetVar_ SetVar_20)),(CImplies_ (CSubset_ (Intersect_ (SetVar_ SetVar_18) (Ctor_ "--Cons" [(Top_),(Ctor_ "--Null" [])])) (Bottom_)) (CEqual_ (SetVar_ SetVar_20) (Bottom_))),(CImplies_ (CNot_ (CSubset_ (Intersect_ (SetVar_ SetVar_18) (Ctor_ "--Cons" [(Top_),(Ctor_ "--Null" [])])) (Bottom_))) (CSubset_ (SetVar_ SetVar_18) (SetVar_ SetVar_20))),(CEqual_ (Ctor_ "--Cons" [(SetVar_ projVar_21_1),(SetVar_ projVar_21_2)]) (Intersect_ (SetVar_ SetVar_18) (Ctor_ "--Cons" [(Top_),(Top_)]))),(CIff_ (CEqual_ (SetVar_ projVar_21_1) (Bottom_)) (CEqual_ (Intersect_ (SetVar_ SetVar_18) (Ctor_ "--Cons" [(Top_),(Top_)])) (Bottom_))),(CIff_ (CEqual_ (SetVar_ projVar_21_2) (Bottom_)) (CEqual_ (Intersect_ (SetVar_ SetVar_18) (Ctor_ "--Cons" [(Top_),(Top_)])) (Bottom_)))]
After second sub:
[(CSubset_ (SetVar_ SetVar_16) (SetVar_ SetVar_20)),(CImplies_ (CSubset_ (Intersect_ (SetVar_ SetVar_18) (Ctor_ "--Cons" [(Top_),(Ctor_ "--Null" [])])) (Bottom_)) (CEqual_ (SetVar_ SetVar_20) (Bottom_))),(CImplies_ (CNot_ (CSubset_ (Intersect_ (SetVar_ SetVar_18) (Ctor_ "--Cons" [(Top_),(Ctor_ "--Null" [])])) (Bottom_))) (CSubset_ (SetVar_ SetVar_18) (SetVar_ SetVar_20))),(CEqual_ (Ctor_ "--Cons" [(SetVar_ projVar_21_1),(SetVar_ projVar_21_2)]) (Intersect_ (SetVar_ SetVar_18) (Ctor_ "--Cons" [(Top_),(Top_)]))),(CIff_ (CEqual_ (SetVar_ projVar_21_1) (Bottom_)) (CEqual_ (Intersect_ (SetVar_ SetVar_18) (Ctor_ "--Cons" [(Top_),(Top_)])) (Bottom_))),(CIff_ (CEqual_ (SetVar_ projVar_21_2) (Bottom_)) (CEqual_ (Intersect_ (SetVar_ SetVar_18) (Ctor_ "--Cons" [(Top_),(Top_)])) (Bottom_)))]
Initial list:
[(CImplies_ (CSubset_ (Intersect_ (SetVar_ SetVar_18) (Ctor_ "--Cons" [(Top_),(Ctor_ "--Null" [])])) (Bottom_)) (CEqual_ (SetVar_ SetVar_20) (Bottom_))),(CImplies_ (CNot_ (CSubset_ (Intersect_ (SetVar_ SetVar_18) (Ctor_ "--Cons" [(Top_),(Ctor_ "--Null" [])])) (Bottom_))) (CSubset_ (SetVar_ SetVar_18) (SetVar_ SetVar_20))),(CEqual_ (Ctor_ "--Cons" [(SetVar_ projVar_21_1),(SetVar_ projVar_21_2)]) (Intersect_ (SetVar_ SetVar_18) (Ctor_ "--Cons" [(Top_),(Top_)]))),(CIff_ (CEqual_ (SetVar_ projVar_21_1) (Bottom_)) (CEqual_ (Intersect_ (SetVar_ SetVar_18) (Ctor_ "--Cons" [(Top_),(Top_)])) (Bottom_))),(CIff_ (CEqual_ (SetVar_ projVar_21_2) (Bottom_)) (CEqual_ (Intersect_ (SetVar_ SetVar_18) (Ctor_ "--Cons" [(Top_),(Top_)])) (Bottom_)))]
After subbed:
[(CImplies_ (CSubset_ (Intersect_ (SetVar_ SetVar_18) (Ctor_ "--Cons" [(Top_),(Ctor_ "--Null" [])])) (Bottom_)) (CEqual_ (SetVar_ SetVar_20) (Bottom_))),(CImplies_ (CNot_ (CSubset_ (Intersect_ (SetVar_ SetVar_18) (Ctor_ "--Cons" [(Top_),(Ctor_ "--Null" [])])) (Bottom_))) (CSubset_ (SetVar_ SetVar_18) (SetVar_ SetVar_20))),(CEqual_ (Ctor_ "--Cons" [(SetVar_ projVar_21_1),(SetVar_ projVar_21_2)]) (Intersect_ (SetVar_ SetVar_18) (Ctor_ "--Cons" [(Top_),(Top_)]))),(CIff_ (CEqual_ (SetVar_ projVar_21_1) (Bottom_)) (CEqual_ (Intersect_ (SetVar_ SetVar_18) (Ctor_ "--Cons" [(Top_),(Top_)])) (Bottom_))),(CIff_ (CEqual_ (SetVar_ projVar_21_2) (Bottom_)) (CEqual_ (Intersect_ (SetVar_ SetVar_18) (Ctor_ "--Cons" [(Top_),(Top_)])) (Bottom_)))]
After opt:
[(CImplies_ (CSubset_ (Intersect_ (SetVar_ SetVar_18) (Ctor_ "--Cons" [(Top_),(Ctor_ "--Null" [])])) (Bottom_)) (CEqual_ (SetVar_ SetVar_20) (Bottom_))),(CImplies_ (CNot_ (CSubset_ (Intersect_ (SetVar_ SetVar_18) (Ctor_ "--Cons" [(Top_),(Ctor_ "--Null" [])])) (Bottom_))) (CSubset_ (SetVar_ SetVar_18) (SetVar_ SetVar_20))),(CEqual_ (Ctor_ "--Cons" [(SetVar_ projVar_21_1),(SetVar_ projVar_21_2)]) (Intersect_ (SetVar_ SetVar_18) (Ctor_ "--Cons" [(Top_),(Top_)]))),(CIff_ (CEqual_ (SetVar_ projVar_21_1) (Bottom_)) (CEqual_ (Intersect_ (SetVar_ SetVar_18) (Ctor_ "--Cons" [(Top_),(Top_)])) (Bottom_))),(CIff_ (CEqual_ (SetVar_ projVar_21_2) (Bottom_)) (CEqual_ (Intersect_ (SetVar_ SetVar_18) (Ctor_ "--Cons" [(Top_),(Top_)])) (Bottom_)))]
After second sub:
[(CImplies_ (CSubset_ (Intersect_ (SetVar_ SetVar_18) (Ctor_ "--Cons" [(Top_),(Ctor_ "--Null" [])])) (Bottom_)) (CEqual_ (SetVar_ SetVar_20) (Bottom_))),(CImplies_ (CNot_ (CSubset_ (Intersect_ (SetVar_ SetVar_18) (Ctor_ "--Cons" [(Top_),(Ctor_ "--Null" [])])) (Bottom_))) (CSubset_ (SetVar_ SetVar_18) (SetVar_ SetVar_20))),(CEqual_ (Ctor_ "--Cons" [(SetVar_ projVar_21_1),(SetVar_ projVar_21_2)]) (Intersect_ (SetVar_ SetVar_18) (Ctor_ "--Cons" [(Top_),(Top_)]))),(CIff_ (CEqual_ (SetVar_ projVar_21_1) (Bottom_)) (CEqual_ (Intersect_ (SetVar_ SetVar_18) (Ctor_ "--Cons" [(Top_),(Top_)])) (Bottom_))),(CIff_ (CEqual_ (SetVar_ projVar_21_2) (Bottom_)) (CEqual_ (Intersect_ (SetVar_ SetVar_18) (Ctor_ "--Cons" [(Top_),(Top_)])) (Bottom_)))]
Initial list:
[(CImplies_ (CSubset_ (Intersect_ (SetVar_ SetVar_18) (Ctor_ "--Cons" [(Top_),(Ctor_ "--Null" [])])) (Bottom_)) (CEqual_ (SetVar_ SetVar_20) (Bottom_))),(CImplies_ (CNot_ (CSubset_ (Intersect_ (SetVar_ SetVar_18) (Ctor_ "--Cons" [(Top_),(Ctor_ "--Null" [])])) (Bottom_))) (CSubset_ (SetVar_ SetVar_18) (SetVar_ SetVar_20))),(CEqual_ (Ctor_ "--Cons" [(SetVar_ projVar_21_1),(SetVar_ projVar_21_2)]) (Intersect_ (SetVar_ SetVar_18) (Ctor_ "--Cons" [(Top_),(Top_)]))),(CIff_ (CEqual_ (SetVar_ projVar_21_1) (Bottom_)) (CEqual_ (Intersect_ (SetVar_ SetVar_18) (Ctor_ "--Cons" [(Top_),(Top_)])) (Bottom_))),(CIff_ (CEqual_ (SetVar_ projVar_21_2) (Bottom_)) (CEqual_ (Intersect_ (SetVar_ SetVar_18) (Ctor_ "--Cons" [(Top_),(Top_)])) (Bottom_))),(CSubset_ (SetVar_ SetVar_18) (Ctor_ "--Cons" [(Top_),(Ctor_ "--Null" [])]))]
After subbed:
[(CImplies_ (CSubset_ (Intersect_ (SetVar_ SetVar_18) (Ctor_ "--Cons" [(Top_),(Ctor_ "--Null" [])])) (Bottom_)) (CEqual_ (SetVar_ SetVar_20) (Bottom_))),(CImplies_ (CNot_ (CSubset_ (Intersect_ (SetVar_ SetVar_18) (Ctor_ "--Cons" [(Top_),(Ctor_ "--Null" [])])) (Bottom_))) (CSubset_ (SetVar_ SetVar_18) (SetVar_ SetVar_20))),(CEqual_ (Ctor_ "--Cons" [(SetVar_ projVar_21_1),(SetVar_ projVar_21_2)]) (Intersect_ (SetVar_ SetVar_18) (Ctor_ "--Cons" [(Top_),(Top_)]))),(CIff_ (CEqual_ (SetVar_ projVar_21_1) (Bottom_)) (CEqual_ (Intersect_ (SetVar_ SetVar_18) (Ctor_ "--Cons" [(Top_),(Top_)])) (Bottom_))),(CIff_ (CEqual_ (SetVar_ projVar_21_2) (Bottom_)) (CEqual_ (Intersect_ (SetVar_ SetVar_18) (Ctor_ "--Cons" [(Top_),(Top_)])) (Bottom_))),(CSubset_ (SetVar_ SetVar_18) (Ctor_ "--Cons" [(Top_),(Ctor_ "--Null" [])]))]
After opt:
[(CImplies_ (CSubset_ (Intersect_ (SetVar_ SetVar_18) (Ctor_ "--Cons" [(Top_),(Ctor_ "--Null" [])])) (Bottom_)) (CEqual_ (SetVar_ SetVar_20) (Bottom_))),(CImplies_ (CNot_ (CSubset_ (Intersect_ (SetVar_ SetVar_18) (Ctor_ "--Cons" [(Top_),(Ctor_ "--Null" [])])) (Bottom_))) (CSubset_ (SetVar_ SetVar_18) (SetVar_ SetVar_20))),(CEqual_ (Ctor_ "--Cons" [(SetVar_ projVar_21_1),(SetVar_ projVar_21_2)]) (Intersect_ (SetVar_ SetVar_18) (Ctor_ "--Cons" [(Top_),(Top_)]))),(CIff_ (CEqual_ (SetVar_ projVar_21_1) (Bottom_)) (CEqual_ (Intersect_ (SetVar_ SetVar_18) (Ctor_ "--Cons" [(Top_),(Top_)])) (Bottom_))),(CIff_ (CEqual_ (SetVar_ projVar_21_2) (Bottom_)) (CEqual_ (Intersect_ (SetVar_ SetVar_18) (Ctor_ "--Cons" [(Top_),(Top_)])) (Bottom_))),(CSubset_ (SetVar_ SetVar_18) (Ctor_ "--Cons" [(Top_),(Ctor_ "--Null" [])]))]
After second sub:
[(CImplies_ (CSubset_ (Intersect_ (SetVar_ SetVar_18) (Ctor_ "--Cons" [(Top_),(Ctor_ "--Null" [])])) (Bottom_)) (CEqual_ (SetVar_ SetVar_20) (Bottom_))),(CImplies_ (CNot_ (CSubset_ (Intersect_ (SetVar_ SetVar_18) (Ctor_ "--Cons" [(Top_),(Ctor_ "--Null" [])])) (Bottom_))) (CSubset_ (SetVar_ SetVar_18) (SetVar_ SetVar_20))),(CEqual_ (Ctor_ "--Cons" [(SetVar_ projVar_21_1),(SetVar_ projVar_21_2)]) (Intersect_ (SetVar_ SetVar_18) (Ctor_ "--Cons" [(Top_),(Top_)]))),(CIff_ (CEqual_ (SetVar_ projVar_21_1) (Bottom_)) (CEqual_ (Intersect_ (SetVar_ SetVar_18) (Ctor_ "--Cons" [(Top_),(Top_)])) (Bottom_))),(CIff_ (CEqual_ (SetVar_ projVar_21_2) (Bottom_)) (CEqual_ (Intersect_ (SetVar_ SetVar_18) (Ctor_ "--Cons" [(Top_),(Top_)])) (Bottom_))),(CSubset_ (SetVar_ SetVar_18) (Ctor_ "--Cons" [(Top_),(Ctor_ "--Null" [])]))]
Flattened top level:
(CAnd_ [(CImplies_ (CSubset_ (Intersect_ (SetVar_ SetVar_18) (Ctor_ "--Cons" [(Top_),(Ctor_ "--Null" [])])) (Bottom_)) (CEqual_ (SetVar_ SetVar_20) (Bottom_))),(CImplies_ (CNot_ (CSubset_ (Intersect_ (SetVar_ SetVar_18) (Ctor_ "--Cons" [(Top_),(Ctor_ "--Null" [])])) (Bottom_))) (CSubset_ (SetVar_ SetVar_18) (SetVar_ SetVar_20))),(CEqual_ (Ctor_ "--Cons" [(SetVar_ projVar_21_1),(SetVar_ projVar_21_2)]) (Intersect_ (SetVar_ SetVar_18) (Ctor_ "--Cons" [(Top_),(Top_)]))),(CIff_ (CEqual_ (SetVar_ projVar_21_1) (Bottom_)) (CEqual_ (Intersect_ (SetVar_ SetVar_18) (Ctor_ "--Cons" [(Top_),(Top_)])) (Bottom_))),(CIff_ (CEqual_ (SetVar_ projVar_21_2) (Bottom_)) (CEqual_ (Intersect_ (SetVar_ SetVar_18) (Ctor_ "--Cons" [(Top_),(Top_)])) (Bottom_)))])

Solving pattern match constraints
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
cInitial: CAnd [CImplies (CSubset (Intersect (Var "SetVar_18") (FunApp "--Cons" [Top,FunApp "--Null" []])) Bottom) (CAnd [CSubset (Var "SetVar_20") Bottom,CSubset Bottom (Var "SetVar_20")]),CImplies (CNot (CSubset (Intersect (Var "SetVar_18") (FunApp "--Cons" [Top,FunApp "--Null" []])) Bottom)) (CSubset (Var "SetVar_18") (Var "SetVar_20")),CAnd [CSubset (FunApp "--Cons" [Var "projVar_21_1",Var "projVar_21_2"]) (Intersect (Var "SetVar_18") (FunApp "--Cons" [Top,Top])),CSubset (Intersect (Var "SetVar_18") (FunApp "--Cons" [Top,Top])) (FunApp "--Cons" [Var "projVar_21_1",Var "projVar_21_2"])],CIff (CAnd [CSubset (Var "projVar_21_1") Bottom,CSubset Bottom (Var "projVar_21_1")]) (CAnd [CSubset (Intersect (Var "SetVar_18") (FunApp "--Cons" [Top,Top])) Bottom,CSubset Bottom (Intersect (Var "SetVar_18") (FunApp "--Cons" [Top,Top]))]),CIff (CAnd [CSubset (Var "projVar_21_2") Bottom,CSubset Bottom (Var "projVar_21_2")]) (CAnd [CSubset (Intersect (Var "SetVar_18") (FunApp "--Cons" [Top,Top])) Bottom,CSubset Bottom (Intersect (Var "SetVar_18") (FunApp "--Cons" [Top,Top]))])]
[send->] (set-logic UF )
[<-recv] success
[send->] (set-option :smt.mbqi true )
[<-recv] success
[send->] (push )
[<-recv] success
[send->] (declare-fun literal_0 () Bool )
[<-recv] success
[send->] (declare-fun literal_1 () Bool )
[<-recv] success
[send->] (declare-fun literal_2 () Bool )
[<-recv] success
[send->] (declare-fun literal_3 () Bool )
[<-recv] success
[send->] (declare-fun literal_4 () Bool )
[<-recv] success
[send->] (declare-fun literal_5 () Bool )
[<-recv] success
[send->] (declare-fun literal_6 () Bool )
[<-recv] success
[send->] (declare-fun literal_7 () Bool )
[<-recv] success
[send->] (declare-fun literal_8 () Bool )
[<-recv] success
[send->] (declare-fun literal_9 () Bool )
[<-recv] success
[send->] (declare-fun literal_10 () Bool )
[<-recv] success
[send->] (declare-fun literal_11 () Bool )
[<-recv] success
[send->] (assert (and (=> literal_4 (and literal_1 literal_8 ) ) (=> (not literal_4 ) literal_0 ) (and literal_7 literal_5 ) (= (and literal_2 literal_9 ) (and literal_6 literal_11 ) ) (= (and literal_3 literal_10 ) (and literal_6 literal_11 ) ) ) )
[<-recv] success
Done asserting formula, 12 literals total
Partitioned into 1 subproblems: [[Literal {unLiteral = (Bottom,Intersect (Var "SetVar_18") (FunApp "--Cons" [Top,Top]))},Literal {unLiteral = (FunApp "--Cons" [Var "projVar_21_1",Var "projVar_21_2"],Intersect (Var "SetVar_18") (FunApp "--Cons" [Top,Top]))},Literal {unLiteral = (Bottom,Var "projVar_21_2")},Literal {unLiteral = (Intersect (Var "SetVar_18") (FunApp "--Cons" [Top,Top]),FunApp "--Cons" [Var "projVar_21_1",Var "projVar_21_2"])},Literal {unLiteral = (Bottom,Var "projVar_21_1")},Literal {unLiteral = (Var "projVar_21_1",Bottom)},Literal {unLiteral = (Var "projVar_21_2",Bottom)},Literal {unLiteral = (Intersect (Var "SetVar_18") (FunApp "--Cons" [Top,Top]),Bottom)},Literal {unLiteral = (Intersect (Var "SetVar_18") (FunApp "--Cons" [Top,FunApp "--Null" []]),Bottom)},Literal {unLiteral = (Var "SetVar_18",Var "SetVar_20")},Literal {unLiteral = (Bottom,Var "SetVar_20")},Literal {unLiteral = (Var "SetVar_20",Bottom)}]]
Done asserting subset properties
Lit Vars: [(Literal {unLiteral = (Var "SetVar_18",Var "SetVar_20")},Atom "literal_0"),(Literal {unLiteral = (Var "SetVar_20",Bottom)},Atom "literal_1"),(Literal {unLiteral = (Var "projVar_21_1",Bottom)},Atom "literal_2"),(Literal {unLiteral = (Var "projVar_21_2",Bottom)},Atom "literal_3"),(Literal {unLiteral = (Intersect (Var "SetVar_18") (FunApp "--Cons" [Top,FunApp "--Null" []]),Bottom)},Atom "literal_4"),(Literal {unLiteral = (Intersect (Var "SetVar_18") (FunApp "--Cons" [Top,Top]),FunApp "--Cons" [Var "projVar_21_1",Var "projVar_21_2"])},Atom "literal_5"),(Literal {unLiteral = (Intersect (Var "SetVar_18") (FunApp "--Cons" [Top,Top]),Bottom)},Atom "literal_6"),(Literal {unLiteral = (FunApp "--Cons" [Var "projVar_21_1",Var "projVar_21_2"],Intersect (Var "SetVar_18") (FunApp "--Cons" [Top,Top]))},Atom "literal_7"),(Literal {unLiteral = (Bottom,Var "SetVar_20")},Atom "literal_8"),(Literal {unLiteral = (Bottom,Var "projVar_21_1")},Atom "literal_9"),(Literal {unLiteral = (Bottom,Var "projVar_21_2")},Atom "literal_10"),(Literal {unLiteral = (Bottom,Intersect (Var "SetVar_18") (FunApp "--Cons" [Top,Top]))},Atom "literal_11")]
Pred numbers: fromList [(PVar "SetVar_18",0),(PVar "SetVar_20",1),(PVar "projVar_21_1",2),(PVar "projVar_21_2",3),(PFunApp "--Cons" [Var "projVar_21_1",Var "projVar_21_2"],7),(PFunApp "--Cons" [Top,FunApp "--Null" []],5),(PFunApp "--Cons" [Top,Top],6),(PFunApp "--Null" [],4)]
In theory solver, numBits: 8
Declaring domain
[send->] (declare-fun domainToBeSolved (Bool Bool Bool Bool Bool Bool Bool Bool ) Bool )
[<-recv] success
[send->] (define-fun domain ((z_boolDomain-0 Bool ) (z_boolDomain-1 Bool ) (z_boolDomain-2 Bool ) (z_boolDomain-3 Bool ) (z_boolDomain-4 Bool ) (z_boolDomain-5 Bool ) (z_boolDomain-6 Bool ) (z_boolDomain-7 Bool ) ) Bool (and (and (=> literal_0 (=> z_boolDomain-0 z_boolDomain-1 ) ) (=> literal_1 (=> z_boolDomain-1 false ) ) (=> literal_2 (=> z_boolDomain-2 false ) ) (=> literal_3 (=> z_boolDomain-3 false ) ) (=> literal_4 (=> (and z_boolDomain-0 z_boolDomain-5 ) false ) ) (=> literal_5 (=> (and z_boolDomain-0 z_boolDomain-6 ) z_boolDomain-7 ) ) (=> literal_6 (=> (and z_boolDomain-0 z_boolDomain-6 ) false ) ) (=> literal_7 (=> z_boolDomain-7 (and z_boolDomain-0 z_boolDomain-6 ) ) ) (=> literal_8 (=> false z_boolDomain-1 ) ) (=> literal_9 (=> false z_boolDomain-2 ) ) (=> literal_10 (=> false z_boolDomain-3 ) ) (=> literal_11 (=> false (and z_boolDomain-0 z_boolDomain-6 ) ) ) ) (domainToBeSolved z_boolDomain-0 z_boolDomain-1 z_boolDomain-2 z_boolDomain-3 z_boolDomain-4 z_boolDomain-5 z_boolDomain-6 z_boolDomain-7 ) ) )
[<-recv] success
Declaring constructors
[send->] (declare-fun --Cons-0 (Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool ) Bool )
[<-recv] success
[send->] (declare-fun --Cons-1 (Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool ) Bool )
[<-recv] success
[send->] (declare-fun --Cons-2 (Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool ) Bool )
[<-recv] success
[send->] (declare-fun --Cons-3 (Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool ) Bool )
[<-recv] success
[send->] (define-fun --Cons-4 ((f-arg-0-0 Bool ) (f-arg-0-1 Bool ) (f-arg-0-2 Bool ) (f-arg-0-3 Bool ) (f-arg-0-4 Bool ) (f-arg-0-5 Bool ) (f-arg-0-6 Bool ) (f-arg-0-7 Bool ) (f-arg-1-0 Bool ) (f-arg-1-1 Bool ) (f-arg-1-2 Bool ) (f-arg-1-3 Bool ) (f-arg-1-4 Bool ) (f-arg-1-5 Bool ) (f-arg-1-6 Bool ) (f-arg-1-7 Bool ) ) Bool false )
[<-recv] success
[send->] (define-fun --Cons-5 ((f-arg-0-0 Bool ) (f-arg-0-1 Bool ) (f-arg-0-2 Bool ) (f-arg-0-3 Bool ) (f-arg-0-4 Bool ) (f-arg-0-5 Bool ) (f-arg-0-6 Bool ) (f-arg-0-7 Bool ) (f-arg-1-0 Bool ) (f-arg-1-1 Bool ) (f-arg-1-2 Bool ) (f-arg-1-3 Bool ) (f-arg-1-4 Bool ) (f-arg-1-5 Bool ) (f-arg-1-6 Bool ) (f-arg-1-7 Bool ) ) Bool (and true f-arg-1-4 ) )
[<-recv] success
[send->] (define-fun --Cons-6 ((f-arg-0-0 Bool ) (f-arg-0-1 Bool ) (f-arg-0-2 Bool ) (f-arg-0-3 Bool ) (f-arg-0-4 Bool ) (f-arg-0-5 Bool ) (f-arg-0-6 Bool ) (f-arg-0-7 Bool ) (f-arg-1-0 Bool ) (f-arg-1-1 Bool ) (f-arg-1-2 Bool ) (f-arg-1-3 Bool ) (f-arg-1-4 Bool ) (f-arg-1-5 Bool ) (f-arg-1-6 Bool ) (f-arg-1-7 Bool ) ) Bool (and true true ) )
[<-recv] success
[send->] (define-fun --Cons-7 ((f-arg-0-0 Bool ) (f-arg-0-1 Bool ) (f-arg-0-2 Bool ) (f-arg-0-3 Bool ) (f-arg-0-4 Bool ) (f-arg-0-5 Bool ) (f-arg-0-6 Bool ) (f-arg-0-7 Bool ) (f-arg-1-0 Bool ) (f-arg-1-1 Bool ) (f-arg-1-2 Bool ) (f-arg-1-3 Bool ) (f-arg-1-4 Bool ) (f-arg-1-5 Bool ) (f-arg-1-6 Bool ) (f-arg-1-7 Bool ) ) Bool (and f-arg-0-2 f-arg-1-3 ) )
[<-recv] success
[send->] (declare-fun --Null-0 () Bool )
[<-recv] success
[send->] (declare-fun --Null-1 () Bool )
[<-recv] success
[send->] (declare-fun --Null-2 () Bool )
[<-recv] success
[send->] (declare-fun --Null-3 () Bool )
[<-recv] success
[send->] (define-fun --Null-4 () Bool true )
[<-recv] success
[send->] (define-fun --Null-5 () Bool false )
[<-recv] success
[send->] (define-fun --Null-6 () Bool false )
[<-recv] success
[send->] (define-fun --Null-7 () Bool false )
[<-recv] success
Declaring existentials
[send->] (declare-fun x_exists_11-0 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_11-1 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_11-2 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_11-3 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_11-4 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_11-5 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_11-6 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_11-7 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_10-0 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_10-1 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_10-2 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_10-3 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_10-4 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_10-5 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_10-6 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_10-7 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_9-0 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_9-1 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_9-2 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_9-3 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_9-4 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_9-5 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_9-6 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_9-7 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_8-0 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_8-1 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_8-2 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_8-3 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_8-4 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_8-5 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_8-6 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_8-7 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_7-0 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_7-1 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_7-2 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_7-3 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_7-4 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_7-5 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_7-6 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_7-7 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_6-0 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_6-1 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_6-2 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_6-3 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_6-4 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_6-5 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_6-6 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_6-7 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_5-0 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_5-1 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_5-2 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_5-3 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_5-4 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_5-5 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_5-6 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_5-7 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_4-0 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_4-1 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_4-2 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_4-3 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_4-4 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_4-5 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_4-6 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_4-7 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_3-0 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_3-1 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_3-2 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_3-3 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_3-4 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_3-5 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_3-6 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_3-7 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_2-0 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_2-1 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_2-2 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_2-3 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_2-4 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_2-5 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_2-6 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_2-7 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_1-0 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_1-1 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_1-2 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_1-3 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_1-4 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_1-5 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_1-6 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_1-7 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_0-0 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_0-1 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_0-2 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_0-3 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_0-4 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_0-5 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_0-6 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_0-7 () Bool )
[<-recv] success
Assert existential properties
[send->] (assert (=> (not literal_0 ) (and (and (domain x_exists_0-0 x_exists_0-1 x_exists_0-2 x_exists_0-3 x_exists_0-4 x_exists_0-5 x_exists_0-6 x_exists_0-7 ) x_exists_0-0 ) (not x_exists_0-1 ) ) ) )
[<-recv] success
[send->] (assert (=> (not literal_1 ) (and (and (domain x_exists_1-0 x_exists_1-1 x_exists_1-2 x_exists_1-3 x_exists_1-4 x_exists_1-5 x_exists_1-6 x_exists_1-7 ) x_exists_1-1 ) (not false ) ) ) )
[<-recv] success
[send->] (assert (=> (not literal_2 ) (and (and (domain x_exists_2-0 x_exists_2-1 x_exists_2-2 x_exists_2-3 x_exists_2-4 x_exists_2-5 x_exists_2-6 x_exists_2-7 ) x_exists_2-2 ) (not false ) ) ) )
[<-recv] success
[send->] (assert (=> (not literal_3 ) (and (and (domain x_exists_3-0 x_exists_3-1 x_exists_3-2 x_exists_3-3 x_exists_3-4 x_exists_3-5 x_exists_3-6 x_exists_3-7 ) x_exists_3-3 ) (not false ) ) ) )
[<-recv] success
[send->] (assert (=> (not literal_4 ) (and (and (domain x_exists_4-0 x_exists_4-1 x_exists_4-2 x_exists_4-3 x_exists_4-4 x_exists_4-5 x_exists_4-6 x_exists_4-7 ) (and x_exists_4-0 x_exists_4-5 ) ) (not false ) ) ) )
[<-recv] success
[send->] (assert (=> (not literal_5 ) (and (and (domain x_exists_5-0 x_exists_5-1 x_exists_5-2 x_exists_5-3 x_exists_5-4 x_exists_5-5 x_exists_5-6 x_exists_5-7 ) (and x_exists_5-0 x_exists_5-6 ) ) (not x_exists_5-7 ) ) ) )
[<-recv] success
[send->] (assert (=> (not literal_6 ) (and (and (domain x_exists_6-0 x_exists_6-1 x_exists_6-2 x_exists_6-3 x_exists_6-4 x_exists_6-5 x_exists_6-6 x_exists_6-7 ) (and x_exists_6-0 x_exists_6-6 ) ) (not false ) ) ) )
[<-recv] success
[send->] (assert (=> (not literal_7 ) (and (and (domain x_exists_7-0 x_exists_7-1 x_exists_7-2 x_exists_7-3 x_exists_7-4 x_exists_7-5 x_exists_7-6 x_exists_7-7 ) x_exists_7-7 ) (not (and x_exists_7-0 x_exists_7-6 ) ) ) ) )
[<-recv] success
[send->] (assert (=> (not literal_8 ) (and (and (domain x_exists_8-0 x_exists_8-1 x_exists_8-2 x_exists_8-3 x_exists_8-4 x_exists_8-5 x_exists_8-6 x_exists_8-7 ) false ) (not x_exists_8-1 ) ) ) )
[<-recv] success
[send->] (assert (=> (not literal_9 ) (and (and (domain x_exists_9-0 x_exists_9-1 x_exists_9-2 x_exists_9-3 x_exists_9-4 x_exists_9-5 x_exists_9-6 x_exists_9-7 ) false ) (not x_exists_9-2 ) ) ) )
[<-recv] success
[send->] (assert (=> (not literal_10 ) (and (and (domain x_exists_10-0 x_exists_10-1 x_exists_10-2 x_exists_10-3 x_exists_10-4 x_exists_10-5 x_exists_10-6 x_exists_10-7 ) false ) (not x_exists_10-3 ) ) ) )
[<-recv] success
[send->] (assert (=> (not literal_11 ) (and (and (domain x_exists_11-0 x_exists_11-1 x_exists_11-2 x_exists_11-3 x_exists_11-4 x_exists_11-5 x_exists_11-6 x_exists_11-7 ) false ) (not (and x_exists_11-0 x_exists_11-6 ) ) ) ) )
[<-recv] success
Asserting function domain properties
[send->] (assert (forall ((y_univ_1-0 Bool ) (y_univ_1-1 Bool ) (y_univ_1-2 Bool ) (y_univ_1-3 Bool ) (y_univ_1-4 Bool ) (y_univ_1-5 Bool ) (y_univ_1-6 Bool ) (y_univ_1-7 Bool ) (y_univ_2-0 Bool ) (y_univ_2-1 Bool ) (y_univ_2-2 Bool ) (y_univ_2-3 Bool ) (y_univ_2-4 Bool ) (y_univ_2-5 Bool ) (y_univ_2-6 Bool ) (y_univ_2-7 Bool ) (y_univ_3-0 Bool ) (y_univ_3-1 Bool ) (y_univ_3-2 Bool ) (y_univ_3-3 Bool ) (y_univ_3-4 Bool ) (y_univ_3-5 Bool ) (y_univ_3-6 Bool ) (y_univ_3-7 Bool ) (y_univ_4-0 Bool ) (y_univ_4-1 Bool ) (y_univ_4-2 Bool ) (y_univ_4-3 Bool ) (y_univ_4-4 Bool ) (y_univ_4-5 Bool ) (y_univ_4-6 Bool ) (y_univ_4-7 Bool ) ) (and (=> (and (domain y_univ_1-0 y_univ_1-1 y_univ_1-2 y_univ_1-3 y_univ_1-4 y_univ_1-5 y_univ_1-6 y_univ_1-7 ) (domain y_univ_2-0 y_univ_2-1 y_univ_2-2 y_univ_2-3 y_univ_2-4 y_univ_2-5 y_univ_2-6 y_univ_2-7 ) (domain y_univ_3-0 y_univ_3-1 y_univ_3-2 y_univ_3-3 y_univ_3-4 y_univ_3-5 y_univ_3-6 y_univ_3-7 ) (domain y_univ_4-0 y_univ_4-1 y_univ_4-2 y_univ_4-3 y_univ_4-4 y_univ_4-5 y_univ_4-6 y_univ_4-7 ) ) (and true true true true true true (and (= true --Null-4 ) (= (--Cons-4 y_univ_1-0 y_univ_1-1 y_univ_1-2 y_univ_1-3 y_univ_1-4 y_univ_1-5 y_univ_1-6 y_univ_1-7 y_univ_2-0 y_univ_2-1 y_univ_2-2 y_univ_2-3 y_univ_2-4 y_univ_2-5 y_univ_2-6 y_univ_2-7 ) false ) ) (and (= (and true y_univ_2-4 ) (--Cons-5 y_univ_1-0 y_univ_1-1 y_univ_1-2 y_univ_1-3 y_univ_1-4 y_univ_1-5 y_univ_1-6 y_univ_1-7 y_univ_2-0 y_univ_2-1 y_univ_2-2 y_univ_2-3 y_univ_2-4 y_univ_2-5 y_univ_2-6 y_univ_2-7 ) ) (= --Null-5 false ) ) true (and (= (and true true ) (--Cons-6 y_univ_1-0 y_univ_1-1 y_univ_1-2 y_univ_1-3 y_univ_1-4 y_univ_1-5 y_univ_1-6 y_univ_1-7 y_univ_2-0 y_univ_2-1 y_univ_2-2 y_univ_2-3 y_univ_2-4 y_univ_2-5 y_univ_2-6 y_univ_2-7 ) ) (= --Null-6 false ) ) true (and (= (and y_univ_1-2 y_univ_2-3 ) (--Cons-7 y_univ_1-0 y_univ_1-1 y_univ_1-2 y_univ_1-3 y_univ_1-4 y_univ_1-5 y_univ_1-6 y_univ_1-7 y_univ_2-0 y_univ_2-1 y_univ_2-2 y_univ_2-3 y_univ_2-4 y_univ_2-5 y_univ_2-6 y_univ_2-7 ) ) (= --Null-7 false ) ) ) ) (and (domain (--Cons-0 y_univ_1-0 y_univ_1-1 y_univ_1-2 y_univ_1-3 y_univ_1-4 y_univ_1-5 y_univ_1-6 y_univ_1-7 y_univ_2-0 y_univ_2-1 y_univ_2-2 y_univ_2-3 y_univ_2-4 y_univ_2-5 y_univ_2-6 y_univ_2-7 ) (--Cons-1 y_univ_1-0 y_univ_1-1 y_univ_1-2 y_univ_1-3 y_univ_1-4 y_univ_1-5 y_univ_1-6 y_univ_1-7 y_univ_2-0 y_univ_2-1 y_univ_2-2 y_univ_2-3 y_univ_2-4 y_univ_2-5 y_univ_2-6 y_univ_2-7 ) (--Cons-2 y_univ_1-0 y_univ_1-1 y_univ_1-2 y_univ_1-3 y_univ_1-4 y_univ_1-5 y_univ_1-6 y_univ_1-7 y_univ_2-0 y_univ_2-1 y_univ_2-2 y_univ_2-3 y_univ_2-4 y_univ_2-5 y_univ_2-6 y_univ_2-7 ) (--Cons-3 y_univ_1-0 y_univ_1-1 y_univ_1-2 y_univ_1-3 y_univ_1-4 y_univ_1-5 y_univ_1-6 y_univ_1-7 y_univ_2-0 y_univ_2-1 y_univ_2-2 y_univ_2-3 y_univ_2-4 y_univ_2-5 y_univ_2-6 y_univ_2-7 ) (--Cons-4 y_univ_1-0 y_univ_1-1 y_univ_1-2 y_univ_1-3 y_univ_1-4 y_univ_1-5 y_univ_1-6 y_univ_1-7 y_univ_2-0 y_univ_2-1 y_univ_2-2 y_univ_2-3 y_univ_2-4 y_univ_2-5 y_univ_2-6 y_univ_2-7 ) (--Cons-5 y_univ_1-0 y_univ_1-1 y_univ_1-2 y_univ_1-3 y_univ_1-4 y_univ_1-5 y_univ_1-6 y_univ_1-7 y_univ_2-0 y_univ_2-1 y_univ_2-2 y_univ_2-3 y_univ_2-4 y_univ_2-5 y_univ_2-6 y_univ_2-7 ) (--Cons-6 y_univ_1-0 y_univ_1-1 y_univ_1-2 y_univ_1-3 y_univ_1-4 y_univ_1-5 y_univ_1-6 y_univ_1-7 y_univ_2-0 y_univ_2-1 y_univ_2-2 y_univ_2-3 y_univ_2-4 y_univ_2-5 y_univ_2-6 y_univ_2-7 ) (--Cons-7 y_univ_1-0 y_univ_1-1 y_univ_1-2 y_univ_1-3 y_univ_1-4 y_univ_1-5 y_univ_1-6 y_univ_1-7 y_univ_2-0 y_univ_2-1 y_univ_2-2 y_univ_2-3 y_univ_2-4 y_univ_2-5 y_univ_2-6 y_univ_2-7 ) ) (domain --Null-0 --Null-1 --Null-2 --Null-3 --Null-4 --Null-5 --Null-6 --Null-7 ) ) ) ) )
[<-recv] success
About do check SAT
[send->] (check-sat )
[stderr] (smt.propagate-values)
[stderr] (smt.nnf-cnf)
[stderr] (smt.reduce-asserted)
[stderr] (smt.refine-injectivity)
[stderr] (smt.pattern-inference)
[stderr] (smt.inferred-patterns :qid k!145
[stderr]   ((--Cons-0 (:var 15)
[stderr]              (:var 14)
[stderr]              (:var 13)
[stderr]              (:var 12)
[stderr]              (:var 11)
[stderr]              (:var 10)
[stderr]              (:var 9)
[stderr]              (:var 8)
[stderr]              (:var 7)
[stderr]              (:var 6)
[stderr]              (:var 5)
[stderr]              (:var 4)
[stderr]              (:var 3)
[stderr]              (:var 2)
[stderr]              (:var 1)
[stderr]              (:var 0)))
[stderr]   ((--Cons-1 (:var 15)
[stderr]              (:var 14)
[stderr]              (:var 13)
[stderr]              (:var 12)
[stderr]              (:var 11)
[stderr]              (:var 10)
[stderr]              (:var 9)
[stderr]              (:var 8)
[stderr]              (:var 7)
[stderr]              (:var 6)
[stderr]              (:var 5)
[stderr]              (:var 4)
[stderr]              (:var 3)
[stderr]              (:var 2)
[stderr]              (:var 1)
[stderr]              (:var 0)))
[stderr]   ((--Cons-2 (:var 15)
[stderr]              (:var 14)
[stderr]              (:var 13)
[stderr]              (:var 12)
[stderr]              (:var 11)
[stderr]              (:var 10)
[stderr]              (:var 9)
[stderr]              (:var 8)
[stderr]              (:var 7)
[stderr]              (:var 6)
[stderr]              (:var 5)
[stderr]              (:var 4)
[stderr]              (:var 3)
[stderr]              (:var 2)
[stderr]              (:var 1)
[stderr]              (:var 0)))
[stderr]   ((--Cons-3 (:var 15)
[stderr]              (:var 14)
[stderr]              (:var 13)
[stderr]              (:var 12)
[stderr]              (:var 11)
[stderr]              (:var 10)
[stderr]              (:var 9)
[stderr]              (:var 8)
[stderr]              (:var 7)
[stderr]              (:var 6)
[stderr]              (:var 5)
[stderr]              (:var 4)
[stderr]              (:var 3)
[stderr]              (:var 2)
[stderr]              (:var 1)
[stderr]              (:var 0)))
[stderr] )
[stderr] (smt.maximizing-bv-sharing)
[stderr] (smt.reduce-asserted)
[stderr] (smt.simplifier-done)
[stderr] (smt.searching)
[stderr] (smt.simplifying-clause-set :num-deleted-clauses 0)
[stderr] is_solved
[stderr] (smt.mbqi)
[stderr] (smt.searching)
[stderr] is_solved
[stderr] (smt.propagate-values)
[stderr] (smt.nnf-cnf)
[stderr] (smt.reduce-asserted)
[stderr] (smt.maximizing-bv-sharing)
[stderr] (smt.reduce-asserted)
[stderr] (smt.simplifier-done)
[stderr] (smt.searching)
[stderr] is_solved
[stderr] (smt.mbqi :failed k!145)
[stderr] (smt.restarting :propagations 101 :decisions 43 :conflicts 2 :restart 100 :restart-outer 100 :agility 0)
[stderr] is_solved
[stderr] (smt.mbqi)
[stderr] (smt.propagate-values)
[stderr] (smt.nnf-cnf)
[stderr] (smt.reduce-asserted)
[stderr] (smt.maximizing-bv-sharing)
[stderr] (smt.reduce-asserted)
[stderr] (smt.simplifier-done)
[stderr] (smt.searching)
[stderr] is_solved
[stderr] (smt.propagate-values)
[stderr] (smt.nnf-cnf)
[stderr] (smt.reduce-asserted)
[stderr] (smt.maximizing-bv-sharing)
[stderr] (smt.reduce-asserted)
[stderr] (smt.simplifier-done)
[stderr] (smt.searching)
[stderr] (smt.simplifying-clause-set :num-deleted-clauses 8)
[stderr] is_solved
[stderr] (smt.propagate-values)
[stderr] (smt.nnf-cnf)
[stderr] (smt.reduce-asserted)
[stderr] (smt.maximizing-bv-sharing)
[stderr] (smt.reduce-asserted)
[stderr] (smt.simplifier-done)
[stderr] (smt.mbqi :failed k!145)
[stderr] (smt.restarting :propagations 201 :decisions 83 :conflicts 2 :restart 100 :restart-outer 100 :agility 0)
[stderr] is_solved
[stderr] (smt.mbqi)
[stderr] (smt.propagate-values)
[stderr] (smt.nnf-cnf)
[stderr] (smt.reduce-asserted)
[stderr] (smt.maximizing-bv-sharing)
[stderr] (smt.reduce-asserted)
[stderr] (smt.simplifier-done)
[stderr] (smt.searching)
[stderr] is_solved
[stderr] (smt.propagate-values)
[stderr] (smt.nnf-cnf)
[stderr] (smt.reduce-asserted)
[stderr] (smt.maximizing-bv-sharing)
[stderr] (smt.reduce-asserted)
[stderr] (smt.simplifier-done)
[stderr] (smt.searching)
[stderr] (smt.mbqi :failed k!145)
[stderr] (smt.restarting :propagations 253 :decisions 123 :conflicts 3 :restart 100 :restart-outer 100 :agility 0.00178903)
[stderr] is_solved
[stderr] (smt.mbqi)
[stderr] (smt.propagate-values)
[stderr] (smt.nnf-cnf)
[stderr] (smt.reduce-asserted)
[stderr] (smt.maximizing-bv-sharing)
[stderr] (smt.reduce-asserted)
[stderr] (smt.simplifier-done)
[stderr] (smt.searching)
[stderr] is_solved
[stderr] (smt.propagate-values)
[stderr] (smt.nnf-cnf)
[stderr] (smt.reduce-asserted)
[stderr] (smt.maximizing-bv-sharing)
[stderr] (smt.reduce-asserted)
[stderr] (smt.simplifier-done)
[stderr] (smt.searching)
[stderr] (smt.simplifying-clause-set :num-deleted-clauses 0)
[stderr] is_solved
[stderr] (smt.propagate-values)
[stderr] (smt.nnf-cnf)
[stderr] (smt.reduce-asserted)
[stderr] (smt.maximizing-bv-sharing)
[stderr] (smt.reduce-asserted)
[stderr] (smt.simplifier-done)
[stderr] (smt.searching)
[stderr] is_solved
[stderr] (smt.propagate-values)
[stderr] (smt.nnf-cnf)
[stderr] (smt.reduce-asserted)
[stderr] (smt.maximizing-bv-sharing)
[stderr] (smt.reduce-asserted)
[stderr] (smt.simplifier-done)
[stderr] (smt.searching)
[stderr] is_solved
[stderr] (smt.propagate-values)
[stderr] (smt.nnf-cnf)
[stderr] (smt.reduce-asserted)
[stderr] (smt.maximizing-bv-sharing)
[stderr] (smt.reduce-asserted)
[stderr] (smt.simplifier-done)
[stderr] (smt.mbqi :failed k!145)
[stderr] (smt.restarting :propagations 272 :decisions 166 :conflicts 3 :restart 100 :restart-outer 100 :agility 0.00177904)
[stderr] is_solved
[stderr] (smt.mbqi)
[stderr] (smt.propagate-values)
[stderr] (smt.nnf-cnf)
[stderr] (smt.reduce-asserted)
[stderr] (smt.maximizing-bv-sharing)
[stderr] (smt.reduce-asserted)
[stderr] (smt.simplifier-done)
[stderr] (smt.searching)
[stderr] (smt.simplifying-clause-set :num-deleted-clauses 28)
[<-recv] sat
Found Solution
Solved Pattern Match constraints
Flattened top level:
(CAnd_ [(CImplies_ (CSubset_ (Intersect_ (SetVar_ SetVar_18) (Ctor_ "--Cons" [(Top_),(Ctor_ "--Null" [])])) (Bottom_)) (CEqual_ (SetVar_ SetVar_20) (Bottom_))),(CImplies_ (CNot_ (CSubset_ (Intersect_ (SetVar_ SetVar_18) (Ctor_ "--Cons" [(Top_),(Ctor_ "--Null" [])])) (Bottom_))) (CSubset_ (SetVar_ SetVar_18) (SetVar_ SetVar_20))),(CEqual_ (Ctor_ "--Cons" [(SetVar_ projVar_21_1),(SetVar_ projVar_21_2)]) (Intersect_ (SetVar_ SetVar_18) (Ctor_ "--Cons" [(Top_),(Top_)]))),(CIff_ (CEqual_ (SetVar_ projVar_21_1) (Bottom_)) (CEqual_ (Intersect_ (SetVar_ SetVar_18) (Ctor_ "--Cons" [(Top_),(Top_)])) (Bottom_))),(CIff_ (CEqual_ (SetVar_ projVar_21_2) (Bottom_)) (CEqual_ (Intersect_ (SetVar_ SetVar_18) (Ctor_ "--Cons" [(Top_),(Top_)])) (Bottom_))),(CSubset_ (SetVar_ SetVar_18) (Ctor_ "--Cons" [(Top_),(Ctor_ "--Null" [])]))])

Solving pattern match constraints
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
cInitial: CAnd [CImplies (CSubset (Intersect (Var "SetVar_18") (FunApp "--Cons" [Top,FunApp "--Null" []])) Bottom) (CAnd [CSubset (Var "SetVar_20") Bottom,CSubset Bottom (Var "SetVar_20")]),CImplies (CNot (CSubset (Intersect (Var "SetVar_18") (FunApp "--Cons" [Top,FunApp "--Null" []])) Bottom)) (CSubset (Var "SetVar_18") (Var "SetVar_20")),CAnd [CSubset (FunApp "--Cons" [Var "projVar_21_1",Var "projVar_21_2"]) (Intersect (Var "SetVar_18") (FunApp "--Cons" [Top,Top])),CSubset (Intersect (Var "SetVar_18") (FunApp "--Cons" [Top,Top])) (FunApp "--Cons" [Var "projVar_21_1",Var "projVar_21_2"])],CIff (CAnd [CSubset (Var "projVar_21_1") Bottom,CSubset Bottom (Var "projVar_21_1")]) (CAnd [CSubset (Intersect (Var "SetVar_18") (FunApp "--Cons" [Top,Top])) Bottom,CSubset Bottom (Intersect (Var "SetVar_18") (FunApp "--Cons" [Top,Top]))]),CIff (CAnd [CSubset (Var "projVar_21_2") Bottom,CSubset Bottom (Var "projVar_21_2")]) (CAnd [CSubset (Intersect (Var "SetVar_18") (FunApp "--Cons" [Top,Top])) Bottom,CSubset Bottom (Intersect (Var "SetVar_18") (FunApp "--Cons" [Top,Top]))]),CSubset (Var "SetVar_18") (FunApp "--Cons" [Top,FunApp "--Null" []])]
[send->] (set-logic UF )
[<-recv] success
[send->] (set-option :smt.mbqi true )
[<-recv] success
[send->] (push )
[<-recv] success
[send->] (declare-fun literal_0 () Bool )
[<-recv] success
[send->] (declare-fun literal_1 () Bool )
[<-recv] success
[send->] (declare-fun literal_2 () Bool )
[<-recv] success
[send->] (declare-fun literal_3 () Bool )
[<-recv] success
[send->] (declare-fun literal_4 () Bool )
[<-recv] success
[send->] (declare-fun literal_5 () Bool )
[<-recv] success
[send->] (declare-fun literal_6 () Bool )
[<-recv] success
[send->] (declare-fun literal_7 () Bool )
[<-recv] success
[send->] (declare-fun literal_8 () Bool )
[<-recv] success
[send->] (declare-fun literal_9 () Bool )
[<-recv] success
[send->] (declare-fun literal_10 () Bool )
[<-recv] success
[send->] (declare-fun literal_11 () Bool )
[<-recv] success
[send->] (declare-fun literal_12 () Bool )
[<-recv] success
[send->] (assert (and (=> literal_5 (and literal_2 literal_9 ) ) (=> (not literal_5 ) literal_0 ) (and literal_8 literal_6 ) (= (and literal_3 literal_10 ) (and literal_7 literal_12 ) ) (= (and literal_4 literal_11 ) (and literal_7 literal_12 ) ) literal_1 ) )
[<-recv] success
Done asserting formula, 13 literals total
Partitioned into 1 subproblems: [[Literal {unLiteral = (Bottom,Intersect (Var "SetVar_18") (FunApp "--Cons" [Top,Top]))},Literal {unLiteral = (FunApp "--Cons" [Var "projVar_21_1",Var "projVar_21_2"],Intersect (Var "SetVar_18") (FunApp "--Cons" [Top,Top]))},Literal {unLiteral = (Bottom,Var "projVar_21_2")},Literal {unLiteral = (Intersect (Var "SetVar_18") (FunApp "--Cons" [Top,Top]),FunApp "--Cons" [Var "projVar_21_1",Var "projVar_21_2"])},Literal {unLiteral = (Bottom,Var "projVar_21_1")},Literal {unLiteral = (Var "projVar_21_1",Bottom)},Literal {unLiteral = (Var "projVar_21_2",Bottom)},Literal {unLiteral = (Intersect (Var "SetVar_18") (FunApp "--Cons" [Top,Top]),Bottom)},Literal {unLiteral = (Intersect (Var "SetVar_18") (FunApp "--Cons" [Top,FunApp "--Null" []]),Bottom)},Literal {unLiteral = (Var "SetVar_18",FunApp "--Cons" [Top,FunApp "--Null" []])},Literal {unLiteral = (Var "SetVar_18",Var "SetVar_20")},Literal {unLiteral = (Bottom,Var "SetVar_20")},Literal {unLiteral = (Var "SetVar_20",Bottom)}]]
Done asserting subset properties
Lit Vars: [(Literal {unLiteral = (Var "SetVar_18",Var "SetVar_20")},Atom "literal_0"),(Literal {unLiteral = (Var "SetVar_18",FunApp "--Cons" [Top,FunApp "--Null" []])},Atom "literal_1"),(Literal {unLiteral = (Var "SetVar_20",Bottom)},Atom "literal_2"),(Literal {unLiteral = (Var "projVar_21_1",Bottom)},Atom "literal_3"),(Literal {unLiteral = (Var "projVar_21_2",Bottom)},Atom "literal_4"),(Literal {unLiteral = (Intersect (Var "SetVar_18") (FunApp "--Cons" [Top,FunApp "--Null" []]),Bottom)},Atom "literal_5"),(Literal {unLiteral = (Intersect (Var "SetVar_18") (FunApp "--Cons" [Top,Top]),FunApp "--Cons" [Var "projVar_21_1",Var "projVar_21_2"])},Atom "literal_6"),(Literal {unLiteral = (Intersect (Var "SetVar_18") (FunApp "--Cons" [Top,Top]),Bottom)},Atom "literal_7"),(Literal {unLiteral = (FunApp "--Cons" [Var "projVar_21_1",Var "projVar_21_2"],Intersect (Var "SetVar_18") (FunApp "--Cons" [Top,Top]))},Atom "literal_8"),(Literal {unLiteral = (Bottom,Var "SetVar_20")},Atom "literal_9"),(Literal {unLiteral = (Bottom,Var "projVar_21_1")},Atom "literal_10"),(Literal {unLiteral = (Bottom,Var "projVar_21_2")},Atom "literal_11"),(Literal {unLiteral = (Bottom,Intersect (Var "SetVar_18") (FunApp "--Cons" [Top,Top]))},Atom "literal_12")]
Pred numbers: fromList [(PVar "SetVar_18",0),(PVar "SetVar_20",1),(PVar "projVar_21_1",4),(PVar "projVar_21_2",5),(PFunApp "--Cons" [Var "projVar_21_1",Var "projVar_21_2"],7),(PFunApp "--Cons" [Top,FunApp "--Null" []],3),(PFunApp "--Cons" [Top,Top],6),(PFunApp "--Null" [],2)]
In theory solver, numBits: 8
Declaring domain
[send->] (declare-fun domainToBeSolved (Bool Bool Bool Bool Bool Bool Bool Bool ) Bool )
[<-recv] success
[send->] (define-fun domain ((z_boolDomain-0 Bool ) (z_boolDomain-1 Bool ) (z_boolDomain-2 Bool ) (z_boolDomain-3 Bool ) (z_boolDomain-4 Bool ) (z_boolDomain-5 Bool ) (z_boolDomain-6 Bool ) (z_boolDomain-7 Bool ) ) Bool (and (and (=> literal_0 (=> z_boolDomain-0 z_boolDomain-1 ) ) (=> literal_1 (=> z_boolDomain-0 z_boolDomain-3 ) ) (=> literal_2 (=> z_boolDomain-1 false ) ) (=> literal_3 (=> z_boolDomain-4 false ) ) (=> literal_4 (=> z_boolDomain-5 false ) ) (=> literal_5 (=> (and z_boolDomain-0 z_boolDomain-3 ) false ) ) (=> literal_6 (=> (and z_boolDomain-0 z_boolDomain-6 ) z_boolDomain-7 ) ) (=> literal_7 (=> (and z_boolDomain-0 z_boolDomain-6 ) false ) ) (=> literal_8 (=> z_boolDomain-7 (and z_boolDomain-0 z_boolDomain-6 ) ) ) (=> literal_9 (=> false z_boolDomain-1 ) ) (=> literal_10 (=> false z_boolDomain-4 ) ) (=> literal_11 (=> false z_boolDomain-5 ) ) (=> literal_12 (=> false (and z_boolDomain-0 z_boolDomain-6 ) ) ) ) (domainToBeSolved z_boolDomain-0 z_boolDomain-1 z_boolDomain-2 z_boolDomain-3 z_boolDomain-4 z_boolDomain-5 z_boolDomain-6 z_boolDomain-7 ) ) )
[<-recv] success
Declaring constructors
[send->] (declare-fun --Cons-0 (Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool ) Bool )
[<-recv] success
[send->] (declare-fun --Cons-1 (Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool ) Bool )
[<-recv] success
[send->] (declare-fun --Cons-4 (Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool ) Bool )
[<-recv] success
[send->] (declare-fun --Cons-5 (Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool ) Bool )
[<-recv] success
[send->] (define-fun --Cons-2 ((f-arg-0-0 Bool ) (f-arg-0-1 Bool ) (f-arg-0-2 Bool ) (f-arg-0-3 Bool ) (f-arg-0-4 Bool ) (f-arg-0-5 Bool ) (f-arg-0-6 Bool ) (f-arg-0-7 Bool ) (f-arg-1-0 Bool ) (f-arg-1-1 Bool ) (f-arg-1-2 Bool ) (f-arg-1-3 Bool ) (f-arg-1-4 Bool ) (f-arg-1-5 Bool ) (f-arg-1-6 Bool ) (f-arg-1-7 Bool ) ) Bool false )
[<-recv] success
[send->] (define-fun --Cons-3 ((f-arg-0-0 Bool ) (f-arg-0-1 Bool ) (f-arg-0-2 Bool ) (f-arg-0-3 Bool ) (f-arg-0-4 Bool ) (f-arg-0-5 Bool ) (f-arg-0-6 Bool ) (f-arg-0-7 Bool ) (f-arg-1-0 Bool ) (f-arg-1-1 Bool ) (f-arg-1-2 Bool ) (f-arg-1-3 Bool ) (f-arg-1-4 Bool ) (f-arg-1-5 Bool ) (f-arg-1-6 Bool ) (f-arg-1-7 Bool ) ) Bool (and true f-arg-1-2 ) )
[<-recv] success
[send->] (define-fun --Cons-6 ((f-arg-0-0 Bool ) (f-arg-0-1 Bool ) (f-arg-0-2 Bool ) (f-arg-0-3 Bool ) (f-arg-0-4 Bool ) (f-arg-0-5 Bool ) (f-arg-0-6 Bool ) (f-arg-0-7 Bool ) (f-arg-1-0 Bool ) (f-arg-1-1 Bool ) (f-arg-1-2 Bool ) (f-arg-1-3 Bool ) (f-arg-1-4 Bool ) (f-arg-1-5 Bool ) (f-arg-1-6 Bool ) (f-arg-1-7 Bool ) ) Bool (and true true ) )
[<-recv] success
[send->] (define-fun --Cons-7 ((f-arg-0-0 Bool ) (f-arg-0-1 Bool ) (f-arg-0-2 Bool ) (f-arg-0-3 Bool ) (f-arg-0-4 Bool ) (f-arg-0-5 Bool ) (f-arg-0-6 Bool ) (f-arg-0-7 Bool ) (f-arg-1-0 Bool ) (f-arg-1-1 Bool ) (f-arg-1-2 Bool ) (f-arg-1-3 Bool ) (f-arg-1-4 Bool ) (f-arg-1-5 Bool ) (f-arg-1-6 Bool ) (f-arg-1-7 Bool ) ) Bool (and f-arg-0-4 f-arg-1-5 ) )
[<-recv] success
[send->] (declare-fun --Null-0 () Bool )
[<-recv] success
[send->] (declare-fun --Null-1 () Bool )
[<-recv] success
[send->] (declare-fun --Null-4 () Bool )
[<-recv] success
[send->] (declare-fun --Null-5 () Bool )
[<-recv] success
[send->] (define-fun --Null-2 () Bool true )
[<-recv] success
[send->] (define-fun --Null-3 () Bool false )
[<-recv] success
[send->] (define-fun --Null-6 () Bool false )
[<-recv] success
[send->] (define-fun --Null-7 () Bool false )
[<-recv] success
Declaring existentials
[send->] (declare-fun x_exists_12-0 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_12-1 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_12-2 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_12-3 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_12-4 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_12-5 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_12-6 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_12-7 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_11-0 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_11-1 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_11-2 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_11-3 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_11-4 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_11-5 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_11-6 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_11-7 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_10-0 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_10-1 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_10-2 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_10-3 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_10-4 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_10-5 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_10-6 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_10-7 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_9-0 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_9-1 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_9-2 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_9-3 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_9-4 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_9-5 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_9-6 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_9-7 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_8-0 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_8-1 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_8-2 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_8-3 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_8-4 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_8-5 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_8-6 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_8-7 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_7-0 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_7-1 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_7-2 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_7-3 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_7-4 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_7-5 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_7-6 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_7-7 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_6-0 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_6-1 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_6-2 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_6-3 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_6-4 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_6-5 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_6-6 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_6-7 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_5-0 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_5-1 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_5-2 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_5-3 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_5-4 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_5-5 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_5-6 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_5-7 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_4-0 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_4-1 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_4-2 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_4-3 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_4-4 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_4-5 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_4-6 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_4-7 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_3-0 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_3-1 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_3-2 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_3-3 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_3-4 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_3-5 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_3-6 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_3-7 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_2-0 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_2-1 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_2-2 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_2-3 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_2-4 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_2-5 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_2-6 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_2-7 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_1-0 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_1-1 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_1-2 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_1-3 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_1-4 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_1-5 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_1-6 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_1-7 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_0-0 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_0-1 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_0-2 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_0-3 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_0-4 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_0-5 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_0-6 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_0-7 () Bool )
[<-recv] success
Assert existential properties
[send->] (assert (=> (not literal_0 ) (and (and (domain x_exists_0-0 x_exists_0-1 x_exists_0-2 x_exists_0-3 x_exists_0-4 x_exists_0-5 x_exists_0-6 x_exists_0-7 ) x_exists_0-0 ) (not x_exists_0-1 ) ) ) )
[<-recv] success
[send->] (assert (=> (not literal_1 ) (and (and (domain x_exists_1-0 x_exists_1-1 x_exists_1-2 x_exists_1-3 x_exists_1-4 x_exists_1-5 x_exists_1-6 x_exists_1-7 ) x_exists_1-0 ) (not x_exists_1-3 ) ) ) )
[<-recv] success
[send->] (assert (=> (not literal_2 ) (and (and (domain x_exists_2-0 x_exists_2-1 x_exists_2-2 x_exists_2-3 x_exists_2-4 x_exists_2-5 x_exists_2-6 x_exists_2-7 ) x_exists_2-1 ) (not false ) ) ) )
[<-recv] success
[send->] (assert (=> (not literal_3 ) (and (and (domain x_exists_3-0 x_exists_3-1 x_exists_3-2 x_exists_3-3 x_exists_3-4 x_exists_3-5 x_exists_3-6 x_exists_3-7 ) x_exists_3-4 ) (not false ) ) ) )
[<-recv] success
[send->] (assert (=> (not literal_4 ) (and (and (domain x_exists_4-0 x_exists_4-1 x_exists_4-2 x_exists_4-3 x_exists_4-4 x_exists_4-5 x_exists_4-6 x_exists_4-7 ) x_exists_4-5 ) (not false ) ) ) )
[<-recv] success
[send->] (assert (=> (not literal_5 ) (and (and (domain x_exists_5-0 x_exists_5-1 x_exists_5-2 x_exists_5-3 x_exists_5-4 x_exists_5-5 x_exists_5-6 x_exists_5-7 ) (and x_exists_5-0 x_exists_5-3 ) ) (not false ) ) ) )
[<-recv] success
[send->] (assert (=> (not literal_6 ) (and (and (domain x_exists_6-0 x_exists_6-1 x_exists_6-2 x_exists_6-3 x_exists_6-4 x_exists_6-5 x_exists_6-6 x_exists_6-7 ) (and x_exists_6-0 x_exists_6-6 ) ) (not x_exists_6-7 ) ) ) )
[<-recv] success
[send->] (assert (=> (not literal_7 ) (and (and (domain x_exists_7-0 x_exists_7-1 x_exists_7-2 x_exists_7-3 x_exists_7-4 x_exists_7-5 x_exists_7-6 x_exists_7-7 ) (and x_exists_7-0 x_exists_7-6 ) ) (not false ) ) ) )
[<-recv] success
[send->] (assert (=> (not literal_8 ) (and (and (domain x_exists_8-0 x_exists_8-1 x_exists_8-2 x_exists_8-3 x_exists_8-4 x_exists_8-5 x_exists_8-6 x_exists_8-7 ) x_exists_8-7 ) (not (and x_exists_8-0 x_exists_8-6 ) ) ) ) )
[<-recv] success
[send->] (assert (=> (not literal_9 ) (and (and (domain x_exists_9-0 x_exists_9-1 x_exists_9-2 x_exists_9-3 x_exists_9-4 x_exists_9-5 x_exists_9-6 x_exists_9-7 ) false ) (not x_exists_9-1 ) ) ) )
[<-recv] success
[send->] (assert (=> (not literal_10 ) (and (and (domain x_exists_10-0 x_exists_10-1 x_exists_10-2 x_exists_10-3 x_exists_10-4 x_exists_10-5 x_exists_10-6 x_exists_10-7 ) false ) (not x_exists_10-4 ) ) ) )
[<-recv] success
[send->] (assert (=> (not literal_11 ) (and (and (domain x_exists_11-0 x_exists_11-1 x_exists_11-2 x_exists_11-3 x_exists_11-4 x_exists_11-5 x_exists_11-6 x_exists_11-7 ) false ) (not x_exists_11-5 ) ) ) )
[<-recv] success
[send->] (assert (=> (not literal_12 ) (and (and (domain x_exists_12-0 x_exists_12-1 x_exists_12-2 x_exists_12-3 x_exists_12-4 x_exists_12-5 x_exists_12-6 x_exists_12-7 ) false ) (not (and x_exists_12-0 x_exists_12-6 ) ) ) ) )
[<-recv] success
Asserting function domain properties
[send->] (assert (forall ((y_univ_1-0 Bool ) (y_univ_1-1 Bool ) (y_univ_1-2 Bool ) (y_univ_1-3 Bool ) (y_univ_1-4 Bool ) (y_univ_1-5 Bool ) (y_univ_1-6 Bool ) (y_univ_1-7 Bool ) (y_univ_2-0 Bool ) (y_univ_2-1 Bool ) (y_univ_2-2 Bool ) (y_univ_2-3 Bool ) (y_univ_2-4 Bool ) (y_univ_2-5 Bool ) (y_univ_2-6 Bool ) (y_univ_2-7 Bool ) (y_univ_3-0 Bool ) (y_univ_3-1 Bool ) (y_univ_3-2 Bool ) (y_univ_3-3 Bool ) (y_univ_3-4 Bool ) (y_univ_3-5 Bool ) (y_univ_3-6 Bool ) (y_univ_3-7 Bool ) (y_univ_4-0 Bool ) (y_univ_4-1 Bool ) (y_univ_4-2 Bool ) (y_univ_4-3 Bool ) (y_univ_4-4 Bool ) (y_univ_4-5 Bool ) (y_univ_4-6 Bool ) (y_univ_4-7 Bool ) ) (and (=> (and (domain y_univ_1-0 y_univ_1-1 y_univ_1-2 y_univ_1-3 y_univ_1-4 y_univ_1-5 y_univ_1-6 y_univ_1-7 ) (domain y_univ_2-0 y_univ_2-1 y_univ_2-2 y_univ_2-3 y_univ_2-4 y_univ_2-5 y_univ_2-6 y_univ_2-7 ) (domain y_univ_3-0 y_univ_3-1 y_univ_3-2 y_univ_3-3 y_univ_3-4 y_univ_3-5 y_univ_3-6 y_univ_3-7 ) (domain y_univ_4-0 y_univ_4-1 y_univ_4-2 y_univ_4-3 y_univ_4-4 y_univ_4-5 y_univ_4-6 y_univ_4-7 ) ) (and true true true (and (= true --Null-2 ) (= (--Cons-2 y_univ_1-0 y_univ_1-1 y_univ_1-2 y_univ_1-3 y_univ_1-4 y_univ_1-5 y_univ_1-6 y_univ_1-7 y_univ_2-0 y_univ_2-1 y_univ_2-2 y_univ_2-3 y_univ_2-4 y_univ_2-5 y_univ_2-6 y_univ_2-7 ) false ) ) (and (= (and true y_univ_2-2 ) (--Cons-3 y_univ_1-0 y_univ_1-1 y_univ_1-2 y_univ_1-3 y_univ_1-4 y_univ_1-5 y_univ_1-6 y_univ_1-7 y_univ_2-0 y_univ_2-1 y_univ_2-2 y_univ_2-3 y_univ_2-4 y_univ_2-5 y_univ_2-6 y_univ_2-7 ) ) (= --Null-3 false ) ) true true true true (and (= (and true true ) (--Cons-6 y_univ_1-0 y_univ_1-1 y_univ_1-2 y_univ_1-3 y_univ_1-4 y_univ_1-5 y_univ_1-6 y_univ_1-7 y_univ_2-0 y_univ_2-1 y_univ_2-2 y_univ_2-3 y_univ_2-4 y_univ_2-5 y_univ_2-6 y_univ_2-7 ) ) (= --Null-6 false ) ) true (and (= (and y_univ_1-4 y_univ_2-5 ) (--Cons-7 y_univ_1-0 y_univ_1-1 y_univ_1-2 y_univ_1-3 y_univ_1-4 y_univ_1-5 y_univ_1-6 y_univ_1-7 y_univ_2-0 y_univ_2-1 y_univ_2-2 y_univ_2-3 y_univ_2-4 y_univ_2-5 y_univ_2-6 y_univ_2-7 ) ) (= --Null-7 false ) ) ) ) (and (domain (--Cons-0 y_univ_1-0 y_univ_1-1 y_univ_1-2 y_univ_1-3 y_univ_1-4 y_univ_1-5 y_univ_1-6 y_univ_1-7 y_univ_2-0 y_univ_2-1 y_univ_2-2 y_univ_2-3 y_univ_2-4 y_univ_2-5 y_univ_2-6 y_univ_2-7 ) (--Cons-1 y_univ_1-0 y_univ_1-1 y_univ_1-2 y_univ_1-3 y_univ_1-4 y_univ_1-5 y_univ_1-6 y_univ_1-7 y_univ_2-0 y_univ_2-1 y_univ_2-2 y_univ_2-3 y_univ_2-4 y_univ_2-5 y_univ_2-6 y_univ_2-7 ) (--Cons-2 y_univ_1-0 y_univ_1-1 y_univ_1-2 y_univ_1-3 y_univ_1-4 y_univ_1-5 y_univ_1-6 y_univ_1-7 y_univ_2-0 y_univ_2-1 y_univ_2-2 y_univ_2-3 y_univ_2-4 y_univ_2-5 y_univ_2-6 y_univ_2-7 ) (--Cons-3 y_univ_1-0 y_univ_1-1 y_univ_1-2 y_univ_1-3 y_univ_1-4 y_univ_1-5 y_univ_1-6 y_univ_1-7 y_univ_2-0 y_univ_2-1 y_univ_2-2 y_univ_2-3 y_univ_2-4 y_univ_2-5 y_univ_2-6 y_univ_2-7 ) (--Cons-4 y_univ_1-0 y_univ_1-1 y_univ_1-2 y_univ_1-3 y_univ_1-4 y_univ_1-5 y_univ_1-6 y_univ_1-7 y_univ_2-0 y_univ_2-1 y_univ_2-2 y_univ_2-3 y_univ_2-4 y_univ_2-5 y_univ_2-6 y_univ_2-7 ) (--Cons-5 y_univ_1-0 y_univ_1-1 y_univ_1-2 y_univ_1-3 y_univ_1-4 y_univ_1-5 y_univ_1-6 y_univ_1-7 y_univ_2-0 y_univ_2-1 y_univ_2-2 y_univ_2-3 y_univ_2-4 y_univ_2-5 y_univ_2-6 y_univ_2-7 ) (--Cons-6 y_univ_1-0 y_univ_1-1 y_univ_1-2 y_univ_1-3 y_univ_1-4 y_univ_1-5 y_univ_1-6 y_univ_1-7 y_univ_2-0 y_univ_2-1 y_univ_2-2 y_univ_2-3 y_univ_2-4 y_univ_2-5 y_univ_2-6 y_univ_2-7 ) (--Cons-7 y_univ_1-0 y_univ_1-1 y_univ_1-2 y_univ_1-3 y_univ_1-4 y_univ_1-5 y_univ_1-6 y_univ_1-7 y_univ_2-0 y_univ_2-1 y_univ_2-2 y_univ_2-3 y_univ_2-4 y_univ_2-5 y_univ_2-6 y_univ_2-7 ) ) (domain --Null-0 --Null-1 --Null-2 --Null-3 --Null-4 --Null-5 --Null-6 --Null-7 ) ) ) ) )
[<-recv] success
About do check SAT
[send->] (check-sat )
[stderr] (smt.propagate-values)
[stderr] (smt.nnf-cnf)
[stderr] (smt.reduce-asserted)
[stderr] (smt.refine-injectivity)
[stderr] (smt.pattern-inference)
[stderr] (smt.inferred-patterns :qid k!155
[stderr]   ((--Cons-0 (:var 15)
[stderr]              (:var 14)
[stderr]              (:var 13)
[stderr]              (:var 12)
[stderr]              (:var 11)
[stderr]              (:var 10)
[stderr]              (:var 9)
[stderr]              (:var 8)
[stderr]              (:var 7)
[stderr]              (:var 6)
[stderr]              (:var 5)
[stderr]              (:var 4)
[stderr]              (:var 3)
[stderr]              (:var 2)
[stderr]              (:var 1)
[stderr]              (:var 0)))
[stderr]   ((--Cons-1 (:var 15)
[stderr]              (:var 14)
[stderr]              (:var 13)
[stderr]              (:var 12)
[stderr]              (:var 11)
[stderr]              (:var 10)
[stderr]              (:var 9)
[stderr]              (:var 8)
[stderr]              (:var 7)
[stderr]              (:var 6)
[stderr]              (:var 5)
[stderr]              (:var 4)
[stderr]              (:var 3)
[stderr]              (:var 2)
[stderr]              (:var 1)
[stderr]              (:var 0)))
[stderr]   ((--Cons-4 (:var 15)
[stderr]              (:var 14)
[stderr]              (:var 13)
[stderr]              (:var 12)
[stderr]              (:var 11)
[stderr]              (:var 10)
[stderr]              (:var 9)
[stderr]              (:var 8)
[stderr]              (:var 7)
[stderr]              (:var 6)
[stderr]              (:var 5)
[stderr]              (:var 4)
[stderr]              (:var 3)
[stderr]              (:var 2)
[stderr]              (:var 1)
[stderr]              (:var 0)))
[stderr]   ((--Cons-5 (:var 15)
[stderr]              (:var 14)
[stderr]              (:var 13)
[stderr]              (:var 12)
[stderr]              (:var 11)
[stderr]              (:var 10)
[stderr]              (:var 9)
[stderr]              (:var 8)
[stderr]              (:var 7)
[stderr]              (:var 6)
[stderr]              (:var 5)
[stderr]              (:var 4)
[stderr]              (:var 3)
[stderr]              (:var 2)
[stderr]              (:var 1)
[stderr]              (:var 0)))
[stderr] )
[stderr] (smt.maximizing-bv-sharing)
[stderr] (smt.reduce-asserted)
[stderr] (smt.simplifier-done)
[stderr] (smt.searching)
[stderr] (smt.simplifying-clause-set :num-deleted-clauses 0)
[stderr] is_solved
[stderr] (smt.mbqi)
[stderr] (smt.searching)
[stderr] is_solved
[stderr] (smt.propagate-values)
[stderr] (smt.nnf-cnf)
[stderr] (smt.reduce-asserted)
[stderr] (smt.maximizing-bv-sharing)
[stderr] (smt.reduce-asserted)
[stderr] (smt.simplifier-done)
[stderr] (smt.searching)
[stderr] is_solved
[stderr] (smt.mbqi :failed k!155)
[stderr] (smt.restarting :propagations 152 :decisions 80 :conflicts 4 :restart 100 :restart-outer 100 :agility 0)
[<-recv] unsat
Solved Pattern Match constraints
Flattened top level:
(CAnd_ [(CSubset_ (SetVar_ SetVar_18) (Ctor_ "--Cons" [(Top_),(Ctor_ "--Null" [])])),(CImplies_ (CSubset_ (Intersect_ (SetVar_ SetVar_18) (Ctor_ "--Cons" [(Top_),(Ctor_ "--Null" [])])) (Bottom_)) (CEqual_ (SetVar_ SetVar_20) (Bottom_))),(CImplies_ (CNot_ (CSubset_ (Intersect_ (SetVar_ SetVar_18) (Ctor_ "--Cons" [(Top_),(Ctor_ "--Null" [])])) (Bottom_))) (CSubset_ (SetVar_ SetVar_18) (SetVar_ SetVar_20))),(CEqual_ (Ctor_ "--Cons" [(SetVar_ projVar_21_1),(SetVar_ projVar_21_2)]) (Intersect_ (SetVar_ SetVar_18) (Ctor_ "--Cons" [(Top_),(Top_)]))),(CIff_ (CEqual_ (SetVar_ projVar_21_1) (Bottom_)) (CEqual_ (Intersect_ (SetVar_ SetVar_18) (Ctor_ "--Cons" [(Top_),(Top_)])) (Bottom_))),(CIff_ (CEqual_ (SetVar_ projVar_21_2) (Bottom_)) (CEqual_ (Intersect_ (SetVar_ SetVar_18) (Ctor_ "--Cons" [(Top_),(Top_)])) (Bottom_)))])

Solving pattern match constraints
[send->] (set-option :print-success true )
[<-recv] success
[send->] (set-option :produce-models true )
[<-recv] success
cInitial: CAnd [CSubset (Var "SetVar_18") (FunApp "--Cons" [Top,FunApp "--Null" []]),CImplies (CSubset (Intersect (Var "SetVar_18") (FunApp "--Cons" [Top,FunApp "--Null" []])) Bottom) (CAnd [CSubset (Var "SetVar_20") Bottom,CSubset Bottom (Var "SetVar_20")]),CImplies (CNot (CSubset (Intersect (Var "SetVar_18") (FunApp "--Cons" [Top,FunApp "--Null" []])) Bottom)) (CSubset (Var "SetVar_18") (Var "SetVar_20")),CAnd [CSubset (FunApp "--Cons" [Var "projVar_21_1",Var "projVar_21_2"]) (Intersect (Var "SetVar_18") (FunApp "--Cons" [Top,Top])),CSubset (Intersect (Var "SetVar_18") (FunApp "--Cons" [Top,Top])) (FunApp "--Cons" [Var "projVar_21_1",Var "projVar_21_2"])],CIff (CAnd [CSubset (Var "projVar_21_1") Bottom,CSubset Bottom (Var "projVar_21_1")]) (CAnd [CSubset (Intersect (Var "SetVar_18") (FunApp "--Cons" [Top,Top])) Bottom,CSubset Bottom (Intersect (Var "SetVar_18") (FunApp "--Cons" [Top,Top]))]),CIff (CAnd [CSubset (Var "projVar_21_2") Bottom,CSubset Bottom (Var "projVar_21_2")]) (CAnd [CSubset (Intersect (Var "SetVar_18") (FunApp "--Cons" [Top,Top])) Bottom,CSubset Bottom (Intersect (Var "SetVar_18") (FunApp "--Cons" [Top,Top]))])]
[send->] (set-logic UF )
[<-recv] success
[send->] (set-option :smt.mbqi true )
[<-recv] success
[send->] (push )
[<-recv] success
[send->] (declare-fun literal_0 () Bool )
[<-recv] success
[send->] (declare-fun literal_1 () Bool )
[<-recv] success
[send->] (declare-fun literal_2 () Bool )
[<-recv] success
[send->] (declare-fun literal_3 () Bool )
[<-recv] success
[send->] (declare-fun literal_4 () Bool )
[<-recv] success
[send->] (declare-fun literal_5 () Bool )
[<-recv] success
[send->] (declare-fun literal_6 () Bool )
[<-recv] success
[send->] (declare-fun literal_7 () Bool )
[<-recv] success
[send->] (declare-fun literal_8 () Bool )
[<-recv] success
[send->] (declare-fun literal_9 () Bool )
[<-recv] success
[send->] (declare-fun literal_10 () Bool )
[<-recv] success
[send->] (declare-fun literal_11 () Bool )
[<-recv] success
[send->] (declare-fun literal_12 () Bool )
[<-recv] success
[send->] (assert (and literal_1 (=> literal_5 (and literal_2 literal_9 ) ) (=> (not literal_5 ) literal_0 ) (and literal_8 literal_6 ) (= (and literal_3 literal_10 ) (and literal_7 literal_12 ) ) (= (and literal_4 literal_11 ) (and literal_7 literal_12 ) ) ) )
[<-recv] success
Done asserting formula, 13 literals total
Partitioned into 1 subproblems: [[Literal {unLiteral = (Bottom,Intersect (Var "SetVar_18") (FunApp "--Cons" [Top,Top]))},Literal {unLiteral = (FunApp "--Cons" [Var "projVar_21_1",Var "projVar_21_2"],Intersect (Var "SetVar_18") (FunApp "--Cons" [Top,Top]))},Literal {unLiteral = (Bottom,Var "projVar_21_2")},Literal {unLiteral = (Intersect (Var "SetVar_18") (FunApp "--Cons" [Top,Top]),FunApp "--Cons" [Var "projVar_21_1",Var "projVar_21_2"])},Literal {unLiteral = (Bottom,Var "projVar_21_1")},Literal {unLiteral = (Var "projVar_21_1",Bottom)},Literal {unLiteral = (Var "projVar_21_2",Bottom)},Literal {unLiteral = (Intersect (Var "SetVar_18") (FunApp "--Cons" [Top,Top]),Bottom)},Literal {unLiteral = (Intersect (Var "SetVar_18") (FunApp "--Cons" [Top,FunApp "--Null" []]),Bottom)},Literal {unLiteral = (Var "SetVar_18",FunApp "--Cons" [Top,FunApp "--Null" []])},Literal {unLiteral = (Var "SetVar_18",Var "SetVar_20")},Literal {unLiteral = (Bottom,Var "SetVar_20")},Literal {unLiteral = (Var "SetVar_20",Bottom)}]]
Done asserting subset properties
Lit Vars: [(Literal {unLiteral = (Var "SetVar_18",Var "SetVar_20")},Atom "literal_0"),(Literal {unLiteral = (Var "SetVar_18",FunApp "--Cons" [Top,FunApp "--Null" []])},Atom "literal_1"),(Literal {unLiteral = (Var "SetVar_20",Bottom)},Atom "literal_2"),(Literal {unLiteral = (Var "projVar_21_1",Bottom)},Atom "literal_3"),(Literal {unLiteral = (Var "projVar_21_2",Bottom)},Atom "literal_4"),(Literal {unLiteral = (Intersect (Var "SetVar_18") (FunApp "--Cons" [Top,FunApp "--Null" []]),Bottom)},Atom "literal_5"),(Literal {unLiteral = (Intersect (Var "SetVar_18") (FunApp "--Cons" [Top,Top]),FunApp "--Cons" [Var "projVar_21_1",Var "projVar_21_2"])},Atom "literal_6"),(Literal {unLiteral = (Intersect (Var "SetVar_18") (FunApp "--Cons" [Top,Top]),Bottom)},Atom "literal_7"),(Literal {unLiteral = (FunApp "--Cons" [Var "projVar_21_1",Var "projVar_21_2"],Intersect (Var "SetVar_18") (FunApp "--Cons" [Top,Top]))},Atom "literal_8"),(Literal {unLiteral = (Bottom,Var "SetVar_20")},Atom "literal_9"),(Literal {unLiteral = (Bottom,Var "projVar_21_1")},Atom "literal_10"),(Literal {unLiteral = (Bottom,Var "projVar_21_2")},Atom "literal_11"),(Literal {unLiteral = (Bottom,Intersect (Var "SetVar_18") (FunApp "--Cons" [Top,Top]))},Atom "literal_12")]
Pred numbers: fromList [(PVar "SetVar_18",0),(PVar "SetVar_20",1),(PVar "projVar_21_1",4),(PVar "projVar_21_2",5),(PFunApp "--Cons" [Var "projVar_21_1",Var "projVar_21_2"],7),(PFunApp "--Cons" [Top,FunApp "--Null" []],3),(PFunApp "--Cons" [Top,Top],6),(PFunApp "--Null" [],2)]
In theory solver, numBits: 8
Declaring domain
[send->] (declare-fun domainToBeSolved (Bool Bool Bool Bool Bool Bool Bool Bool ) Bool )
[<-recv] success
[send->] (define-fun domain ((z_boolDomain-0 Bool ) (z_boolDomain-1 Bool ) (z_boolDomain-2 Bool ) (z_boolDomain-3 Bool ) (z_boolDomain-4 Bool ) (z_boolDomain-5 Bool ) (z_boolDomain-6 Bool ) (z_boolDomain-7 Bool ) ) Bool (and (and (=> literal_0 (=> z_boolDomain-0 z_boolDomain-1 ) ) (=> literal_1 (=> z_boolDomain-0 z_boolDomain-3 ) ) (=> literal_2 (=> z_boolDomain-1 false ) ) (=> literal_3 (=> z_boolDomain-4 false ) ) (=> literal_4 (=> z_boolDomain-5 false ) ) (=> literal_5 (=> (and z_boolDomain-0 z_boolDomain-3 ) false ) ) (=> literal_6 (=> (and z_boolDomain-0 z_boolDomain-6 ) z_boolDomain-7 ) ) (=> literal_7 (=> (and z_boolDomain-0 z_boolDomain-6 ) false ) ) (=> literal_8 (=> z_boolDomain-7 (and z_boolDomain-0 z_boolDomain-6 ) ) ) (=> literal_9 (=> false z_boolDomain-1 ) ) (=> literal_10 (=> false z_boolDomain-4 ) ) (=> literal_11 (=> false z_boolDomain-5 ) ) (=> literal_12 (=> false (and z_boolDomain-0 z_boolDomain-6 ) ) ) ) (domainToBeSolved z_boolDomain-0 z_boolDomain-1 z_boolDomain-2 z_boolDomain-3 z_boolDomain-4 z_boolDomain-5 z_boolDomain-6 z_boolDomain-7 ) ) )
[<-recv] success
Declaring constructors
[send->] (declare-fun --Cons-0 (Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool ) Bool )
[<-recv] success
[send->] (declare-fun --Cons-1 (Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool ) Bool )
[<-recv] success
[send->] (declare-fun --Cons-4 (Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool ) Bool )
[<-recv] success
[send->] (declare-fun --Cons-5 (Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool Bool ) Bool )
[<-recv] success
[send->] (define-fun --Cons-2 ((f-arg-0-0 Bool ) (f-arg-0-1 Bool ) (f-arg-0-2 Bool ) (f-arg-0-3 Bool ) (f-arg-0-4 Bool ) (f-arg-0-5 Bool ) (f-arg-0-6 Bool ) (f-arg-0-7 Bool ) (f-arg-1-0 Bool ) (f-arg-1-1 Bool ) (f-arg-1-2 Bool ) (f-arg-1-3 Bool ) (f-arg-1-4 Bool ) (f-arg-1-5 Bool ) (f-arg-1-6 Bool ) (f-arg-1-7 Bool ) ) Bool false )
[<-recv] success
[send->] (define-fun --Cons-3 ((f-arg-0-0 Bool ) (f-arg-0-1 Bool ) (f-arg-0-2 Bool ) (f-arg-0-3 Bool ) (f-arg-0-4 Bool ) (f-arg-0-5 Bool ) (f-arg-0-6 Bool ) (f-arg-0-7 Bool ) (f-arg-1-0 Bool ) (f-arg-1-1 Bool ) (f-arg-1-2 Bool ) (f-arg-1-3 Bool ) (f-arg-1-4 Bool ) (f-arg-1-5 Bool ) (f-arg-1-6 Bool ) (f-arg-1-7 Bool ) ) Bool (and true f-arg-1-2 ) )
[<-recv] success
[send->] (define-fun --Cons-6 ((f-arg-0-0 Bool ) (f-arg-0-1 Bool ) (f-arg-0-2 Bool ) (f-arg-0-3 Bool ) (f-arg-0-4 Bool ) (f-arg-0-5 Bool ) (f-arg-0-6 Bool ) (f-arg-0-7 Bool ) (f-arg-1-0 Bool ) (f-arg-1-1 Bool ) (f-arg-1-2 Bool ) (f-arg-1-3 Bool ) (f-arg-1-4 Bool ) (f-arg-1-5 Bool ) (f-arg-1-6 Bool ) (f-arg-1-7 Bool ) ) Bool (and true true ) )
[<-recv] success
[send->] (define-fun --Cons-7 ((f-arg-0-0 Bool ) (f-arg-0-1 Bool ) (f-arg-0-2 Bool ) (f-arg-0-3 Bool ) (f-arg-0-4 Bool ) (f-arg-0-5 Bool ) (f-arg-0-6 Bool ) (f-arg-0-7 Bool ) (f-arg-1-0 Bool ) (f-arg-1-1 Bool ) (f-arg-1-2 Bool ) (f-arg-1-3 Bool ) (f-arg-1-4 Bool ) (f-arg-1-5 Bool ) (f-arg-1-6 Bool ) (f-arg-1-7 Bool ) ) Bool (and f-arg-0-4 f-arg-1-5 ) )
[<-recv] success
[send->] (declare-fun --Null-0 () Bool )
[<-recv] success
[send->] (declare-fun --Null-1 () Bool )
[<-recv] success
[send->] (declare-fun --Null-4 () Bool )
[<-recv] success
[send->] (declare-fun --Null-5 () Bool )
[<-recv] success
[send->] (define-fun --Null-2 () Bool true )
[<-recv] success
[send->] (define-fun --Null-3 () Bool false )
[<-recv] success
[send->] (define-fun --Null-6 () Bool false )
[<-recv] success
[send->] (define-fun --Null-7 () Bool false )
[<-recv] success
Declaring existentials
[send->] (declare-fun x_exists_12-0 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_12-1 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_12-2 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_12-3 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_12-4 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_12-5 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_12-6 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_12-7 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_11-0 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_11-1 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_11-2 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_11-3 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_11-4 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_11-5 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_11-6 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_11-7 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_10-0 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_10-1 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_10-2 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_10-3 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_10-4 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_10-5 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_10-6 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_10-7 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_9-0 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_9-1 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_9-2 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_9-3 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_9-4 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_9-5 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_9-6 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_9-7 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_8-0 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_8-1 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_8-2 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_8-3 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_8-4 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_8-5 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_8-6 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_8-7 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_7-0 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_7-1 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_7-2 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_7-3 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_7-4 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_7-5 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_7-6 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_7-7 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_6-0 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_6-1 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_6-2 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_6-3 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_6-4 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_6-5 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_6-6 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_6-7 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_5-0 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_5-1 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_5-2 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_5-3 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_5-4 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_5-5 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_5-6 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_5-7 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_4-0 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_4-1 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_4-2 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_4-3 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_4-4 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_4-5 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_4-6 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_4-7 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_3-0 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_3-1 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_3-2 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_3-3 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_3-4 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_3-5 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_3-6 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_3-7 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_2-0 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_2-1 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_2-2 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_2-3 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_2-4 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_2-5 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_2-6 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_2-7 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_1-0 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_1-1 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_1-2 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_1-3 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_1-4 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_1-5 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_1-6 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_1-7 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_0-0 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_0-1 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_0-2 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_0-3 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_0-4 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_0-5 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_0-6 () Bool )
[<-recv] success
[send->] (declare-fun x_exists_0-7 () Bool )
[<-recv] success
Assert existential properties
[send->] (assert (=> (not literal_0 ) (and (and (domain x_exists_0-0 x_exists_0-1 x_exists_0-2 x_exists_0-3 x_exists_0-4 x_exists_0-5 x_exists_0-6 x_exists_0-7 ) x_exists_0-0 ) (not x_exists_0-1 ) ) ) )
[<-recv] success
[send->] (assert (=> (not literal_1 ) (and (and (domain x_exists_1-0 x_exists_1-1 x_exists_1-2 x_exists_1-3 x_exists_1-4 x_exists_1-5 x_exists_1-6 x_exists_1-7 ) x_exists_1-0 ) (not x_exists_1-3 ) ) ) )
[<-recv] success
[send->] (assert (=> (not literal_2 ) (and (and (domain x_exists_2-0 x_exists_2-1 x_exists_2-2 x_exists_2-3 x_exists_2-4 x_exists_2-5 x_exists_2-6 x_exists_2-7 ) x_exists_2-1 ) (not false ) ) ) )
[<-recv] success
[send->] (assert (=> (not literal_3 ) (and (and (domain x_exists_3-0 x_exists_3-1 x_exists_3-2 x_exists_3-3 x_exists_3-4 x_exists_3-5 x_exists_3-6 x_exists_3-7 ) x_exists_3-4 ) (not false ) ) ) )
[<-recv] success
[send->] (assert (=> (not literal_4 ) (and (and (domain x_exists_4-0 x_exists_4-1 x_exists_4-2 x_exists_4-3 x_exists_4-4 x_exists_4-5 x_exists_4-6 x_exists_4-7 ) x_exists_4-5 ) (not false ) ) ) )
[<-recv] success
[send->] (assert (=> (not literal_5 ) (and (and (domain x_exists_5-0 x_exists_5-1 x_exists_5-2 x_exists_5-3 x_exists_5-4 x_exists_5-5 x_exists_5-6 x_exists_5-7 ) (and x_exists_5-0 x_exists_5-3 ) ) (not false ) ) ) )
[<-recv] success
[send->] (assert (=> (not literal_6 ) (and (and (domain x_exists_6-0 x_exists_6-1 x_exists_6-2 x_exists_6-3 x_exists_6-4 x_exists_6-5 x_exists_6-6 x_exists_6-7 ) (and x_exists_6-0 x_exists_6-6 ) ) (not x_exists_6-7 ) ) ) )
[<-recv] success
[send->] (assert (=> (not literal_7 ) (and (and (domain x_exists_7-0 x_exists_7-1 x_exists_7-2 x_exists_7-3 x_exists_7-4 x_exists_7-5 x_exists_7-6 x_exists_7-7 ) (and x_exists_7-0 x_exists_7-6 ) ) (not false ) ) ) )
[<-recv] success
[send->] (assert (=> (not literal_8 ) (and (and (domain x_exists_8-0 x_exists_8-1 x_exists_8-2 x_exists_8-3 x_exists_8-4 x_exists_8-5 x_exists_8-6 x_exists_8-7 ) x_exists_8-7 ) (not (and x_exists_8-0 x_exists_8-6 ) ) ) ) )
[<-recv] success
[send->] (assert (=> (not literal_9 ) (and (and (domain x_exists_9-0 x_exists_9-1 x_exists_9-2 x_exists_9-3 x_exists_9-4 x_exists_9-5 x_exists_9-6 x_exists_9-7 ) false ) (not x_exists_9-1 ) ) ) )
[<-recv] success
[send->] (assert (=> (not literal_10 ) (and (and (domain x_exists_10-0 x_exists_10-1 x_exists_10-2 x_exists_10-3 x_exists_10-4 x_exists_10-5 x_exists_10-6 x_exists_10-7 ) false ) (not x_exists_10-4 ) ) ) )
[<-recv] success
[send->] (assert (=> (not literal_11 ) (and (and (domain x_exists_11-0 x_exists_11-1 x_exists_11-2 x_exists_11-3 x_exists_11-4 x_exists_11-5 x_exists_11-6 x_exists_11-7 ) false ) (not x_exists_11-5 ) ) ) )
[<-recv] success
[send->] (assert (=> (not literal_12 ) (and (and (domain x_exists_12-0 x_exists_12-1 x_exists_12-2 x_exists_12-3 x_exists_12-4 x_exists_12-5 x_exists_12-6 x_exists_12-7 ) false ) (not (and x_exists_12-0 x_exists_12-6 ) ) ) ) )
[<-recv] success
Asserting function domain properties
[send->] (assert (forall ((y_univ_1-0 Bool ) (y_univ_1-1 Bool ) (y_univ_1-2 Bool ) (y_univ_1-3 Bool ) (y_univ_1-4 Bool ) (y_univ_1-5 Bool ) (y_univ_1-6 Bool ) (y_univ_1-7 Bool ) (y_univ_2-0 Bool ) (y_univ_2-1 Bool ) (y_univ_2-2 Bool ) (y_univ_2-3 Bool ) (y_univ_2-4 Bool ) (y_univ_2-5 Bool ) (y_univ_2-6 Bool ) (y_univ_2-7 Bool ) (y_univ_3-0 Bool ) (y_univ_3-1 Bool ) (y_univ_3-2 Bool ) (y_univ_3-3 Bool ) (y_univ_3-4 Bool ) (y_univ_3-5 Bool ) (y_univ_3-6 Bool ) (y_univ_3-7 Bool ) (y_univ_4-0 Bool ) (y_univ_4-1 Bool ) (y_univ_4-2 Bool ) (y_univ_4-3 Bool ) (y_univ_4-4 Bool ) (y_univ_4-5 Bool ) (y_univ_4-6 Bool ) (y_univ_4-7 Bool ) ) (and (=> (and (domain y_univ_1-0 y_univ_1-1 y_univ_1-2 y_univ_1-3 y_univ_1-4 y_univ_1-5 y_univ_1-6 y_univ_1-7 ) (domain y_univ_2-0 y_univ_2-1 y_univ_2-2 y_univ_2-3 y_univ_2-4 y_univ_2-5 y_univ_2-6 y_univ_2-7 ) (domain y_univ_3-0 y_univ_3-1 y_univ_3-2 y_univ_3-3 y_univ_3-4 y_univ_3-5 y_univ_3-6 y_univ_3-7 ) (domain y_univ_4-0 y_univ_4-1 y_univ_4-2 y_univ_4-3 y_univ_4-4 y_univ_4-5 y_univ_4-6 y_univ_4-7 ) ) (and true true true (and (= true --Null-2 ) (= (--Cons-2 y_univ_1-0 y_univ_1-1 y_univ_1-2 y_univ_1-3 y_univ_1-4 y_univ_1-5 y_univ_1-6 y_univ_1-7 y_univ_2-0 y_univ_2-1 y_univ_2-2 y_univ_2-3 y_univ_2-4 y_univ_2-5 y_univ_2-6 y_univ_2-7 ) false ) ) (and (= (and true y_univ_2-2 ) (--Cons-3 y_univ_1-0 y_univ_1-1 y_univ_1-2 y_univ_1-3 y_univ_1-4 y_univ_1-5 y_univ_1-6 y_univ_1-7 y_univ_2-0 y_univ_2-1 y_univ_2-2 y_univ_2-3 y_univ_2-4 y_univ_2-5 y_univ_2-6 y_univ_2-7 ) ) (= --Null-3 false ) ) true true true true (and (= (and true true ) (--Cons-6 y_univ_1-0 y_univ_1-1 y_univ_1-2 y_univ_1-3 y_univ_1-4 y_univ_1-5 y_univ_1-6 y_univ_1-7 y_univ_2-0 y_univ_2-1 y_univ_2-2 y_univ_2-3 y_univ_2-4 y_univ_2-5 y_univ_2-6 y_univ_2-7 ) ) (= --Null-6 false ) ) true (and (= (and y_univ_1-4 y_univ_2-5 ) (--Cons-7 y_univ_1-0 y_univ_1-1 y_univ_1-2 y_univ_1-3 y_univ_1-4 y_univ_1-5 y_univ_1-6 y_univ_1-7 y_univ_2-0 y_univ_2-1 y_univ_2-2 y_univ_2-3 y_univ_2-4 y_univ_2-5 y_univ_2-6 y_univ_2-7 ) ) (= --Null-7 false ) ) ) ) (and (domain (--Cons-0 y_univ_1-0 y_univ_1-1 y_univ_1-2 y_univ_1-3 y_univ_1-4 y_univ_1-5 y_univ_1-6 y_univ_1-7 y_univ_2-0 y_univ_2-1 y_univ_2-2 y_univ_2-3 y_univ_2-4 y_univ_2-5 y_univ_2-6 y_univ_2-7 ) (--Cons-1 y_univ_1-0 y_univ_1-1 y_univ_1-2 y_univ_1-3 y_univ_1-4 y_univ_1-5 y_univ_1-6 y_univ_1-7 y_univ_2-0 y_univ_2-1 y_univ_2-2 y_univ_2-3 y_univ_2-4 y_univ_2-5 y_univ_2-6 y_univ_2-7 ) (--Cons-2 y_univ_1-0 y_univ_1-1 y_univ_1-2 y_univ_1-3 y_univ_1-4 y_univ_1-5 y_univ_1-6 y_univ_1-7 y_univ_2-0 y_univ_2-1 y_univ_2-2 y_univ_2-3 y_univ_2-4 y_univ_2-5 y_univ_2-6 y_univ_2-7 ) (--Cons-3 y_univ_1-0 y_univ_1-1 y_univ_1-2 y_univ_1-3 y_univ_1-4 y_univ_1-5 y_univ_1-6 y_univ_1-7 y_univ_2-0 y_univ_2-1 y_univ_2-2 y_univ_2-3 y_univ_2-4 y_univ_2-5 y_univ_2-6 y_univ_2-7 ) (--Cons-4 y_univ_1-0 y_univ_1-1 y_univ_1-2 y_univ_1-3 y_univ_1-4 y_univ_1-5 y_univ_1-6 y_univ_1-7 y_univ_2-0 y_univ_2-1 y_univ_2-2 y_univ_2-3 y_univ_2-4 y_univ_2-5 y_univ_2-6 y_univ_2-7 ) (--Cons-5 y_univ_1-0 y_univ_1-1 y_univ_1-2 y_univ_1-3 y_univ_1-4 y_univ_1-5 y_univ_1-6 y_univ_1-7 y_univ_2-0 y_univ_2-1 y_univ_2-2 y_univ_2-3 y_univ_2-4 y_univ_2-5 y_univ_2-6 y_univ_2-7 ) (--Cons-6 y_univ_1-0 y_univ_1-1 y_univ_1-2 y_univ_1-3 y_univ_1-4 y_univ_1-5 y_univ_1-6 y_univ_1-7 y_univ_2-0 y_univ_2-1 y_univ_2-2 y_univ_2-3 y_univ_2-4 y_univ_2-5 y_univ_2-6 y_univ_2-7 ) (--Cons-7 y_univ_1-0 y_univ_1-1 y_univ_1-2 y_univ_1-3 y_univ_1-4 y_univ_1-5 y_univ_1-6 y_univ_1-7 y_univ_2-0 y_univ_2-1 y_univ_2-2 y_univ_2-3 y_univ_2-4 y_univ_2-5 y_univ_2-6 y_univ_2-7 ) ) (domain --Null-0 --Null-1 --Null-2 --Null-3 --Null-4 --Null-5 --Null-6 --Null-7 ) ) ) ) )
[<-recv] success
About do check SAT
[send->] (check-sat )
[stderr] (smt.propagate-values)
[stderr] (smt.nnf-cnf)
[stderr] (smt.reduce-asserted)
[stderr] (smt.refine-injectivity)
[stderr] (smt.pattern-inference)
[stderr] (smt.inferred-patterns :qid k!155
[stderr]   ((--Cons-0 (:var 15)
[stderr]              (:var 14)
[stderr]              (:var 13)
[stderr]              (:var 12)
[stderr]              (:var 11)
[stderr]              (:var 10)
[stderr]              (:var 9)
[stderr]              (:var 8)
[stderr]              (:var 7)
[stderr]              (:var 6)
[stderr]              (:var 5)
[stderr]              (:var 4)
[stderr]              (:var 3)
[stderr]              (:var 2)
[stderr]              (:var 1)
[stderr]              (:var 0)))
[stderr]   ((--Cons-1 (:var 15)
[stderr]              (:var 14)
[stderr]              (:var 13)
[stderr]              (:var 12)
[stderr]              (:var 11)
[stderr]              (:var 10)
[stderr]              (:var 9)
[stderr]              (:var 8)
[stderr]              (:var 7)
[stderr]              (:var 6)
[stderr]              (:var 5)
[stderr]              (:var 4)
[stderr]              (:var 3)
[stderr]              (:var 2)
[stderr]              (:var 1)
[stderr]              (:var 0)))
[stderr]   ((--Cons-4 (:var 15)
[stderr]              (:var 14)
[stderr]              (:var 13)
[stderr]              (:var 12)
[stderr]              (:var 11)
[stderr]              (:var 10)
[stderr]              (:var 9)
[stderr]              (:var 8)
[stderr]              (:var 7)
[stderr]              (:var 6)
[stderr]              (:var 5)
[stderr]              (:var 4)
[stderr]              (:var 3)
[stderr]              (:var 2)
[stderr]              (:var 1)
[stderr]              (:var 0)))
[stderr]   ((--Cons-5 (:var 15)
[stderr]              (:var 14)
[stderr]              (:var 13)
[stderr]              (:var 12)
[stderr]              (:var 11)
[stderr]              (:var 10)
[stderr]              (:var 9)
[stderr]              (:var 8)
[stderr]              (:var 7)
[stderr]              (:var 6)
[stderr]              (:var 5)
[stderr]              (:var 4)
[stderr]              (:var 3)
[stderr]              (:var 2)
[stderr]              (:var 1)
[stderr]              (:var 0)))
[stderr] )
[stderr] (smt.maximizing-bv-sharing)
[stderr] (smt.reduce-asserted)
[stderr] (smt.simplifier-done)
[stderr] (smt.searching)
[stderr] (smt.simplifying-clause-set :num-deleted-clauses 0)
[stderr] is_solved
[stderr] (smt.mbqi)
[stderr] (smt.searching)
[stderr] is_solved
[stderr] (smt.propagate-values)
[stderr] (smt.nnf-cnf)
[stderr] (smt.reduce-asserted)
[stderr] (smt.maximizing-bv-sharing)
[stderr] (smt.reduce-asserted)
[stderr] (smt.simplifier-done)
[stderr] (smt.searching)
[stderr] is_solved
[stderr] (smt.mbqi :failed k!155)
[stderr] (smt.restarting :propagations 152 :decisions 80 :conflicts 4 :restart 100 :restart-outer 100 :agility 0)
[<-recv] unsat
Solved Pattern Match constraints
SAFETY:  failed with (CSubset_ (SetVar_ SetVar_18) (Ctor_ "--Cons" [(Top_),(Ctor_ "--Null" [])]))
defConstr: (CAnd_ [(CEqual_ (SetVar_ SetVar_18) (SetVar_ SetVar_18)),(CSubset_ (SetVar_ SetVar_16) (SetVar_ SetVar_20)),(CAnd_ [(CImplies_ (CSubset_ (Intersect_ (SetVar_ SetVar_18) (Ctor_ "--Cons" [(Top_),(Ctor_ "--Null" [])])) (Bottom_)) (CEqual_ (SetVar_ SetVar_20) (Bottom_))),(CImplies_ (CNot_ (CSubset_ (Intersect_ (SetVar_ SetVar_18) (Ctor_ "--Cons" [(Top_),(Ctor_ "--Null" [])])) (Bottom_))) (CSubset_ (SetVar_ SetVar_18) (SetVar_ SetVar_20))),(CEqual_ (SetVar_ SetVar_18) (SetVar_ SetVar_18)),(CEqual_ (Ctor_ "--Cons" [(SetVar_ projVar_21_1),(SetVar_ projVar_21_2)]) (Intersect_ (SetVar_ SetVar_18) (Ctor_ "--Cons" [(Top_),(Top_)]))),(CIff_ (CEqual_ (SetVar_ projVar_21_1) (Bottom_)) (CEqual_ (Intersect_ (SetVar_ SetVar_18) (Ctor_ "--Cons" [(Top_),(Top_)])) (Bottom_))),(CIff_ (CEqual_ (SetVar_ projVar_21_2) (Bottom_)) (CEqual_ (Intersect_ (SetVar_ SetVar_18) (Ctor_ "--Cons" [(Top_),(Top_)])) (Bottom_))),(CTrue_),(CTrue_)])])
[==================================================] - 1 / 1-- MISSING PATTERNS --------------------------------------------------- Main.elm

This `case` does not have branches for all possibilities:

29|>  case list of
30|>    -- [] -> list
31|>    (only :: []) -> list

Missing possibilities include:

    [_]

I would have to crash if I saw one of those. Add branches for them!

Hint: If you want to write the code for each branch later, use `Debug.todo` as a
placeholder. Read <https://elm-lang.org/0.19.0/missing-patterns> for more
guidance on this workflow.
                                                                     Detected errors in 1 module.
