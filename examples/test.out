Constraining exprssion Case (At (Region {_start = Position {_line = 11, _column = 18}, _end = Position {_line = 11, _column = 19}}) (VarLocal (Name {_name = "l"}))) [CaseBranch (At (Region {_start = Position {_line = 12, _column = 3}, _end = Position {_line = 12, _column = 5}}) (PList [])) (At (Region {_start = Position {_line = 12, _column = 9}, _end = Position {_line = 12, _column = 11}}) (List [])),CaseBranch (At (Region {_start = Position {_line = 13, _column = 4}, _end = Position {_line = 13, _column = 10}}) (PCons (At (Region {_start = Position {_line = 13, _column = 4}, _end = Position {_line = 13, _column = 5}}) (PVar (Name {_name = "h"}))) (At (Region {_start = Position {_line = 13, _column = 9}, _end = Position {_line = 13, _column = 10}}) (PVar (Name {_name = "t"}))))) (At (Region {_start = Position {_line = 13, _column = 15}, _end = Position {_line = 13, _column = 35}}) (Binop (Name {_name = "::"}) (Canonical {_package = Name {_author = "elm", _project = "core"}, _module = Name {_name = "List"}}) (Name {_name = "cons"}) (Forall (fromList [(Name {_name = "a"},())]) (TLambda (TVar (Name {_name = "a"})) (TLambda (TType (Canonical {_package = Name {_author = "elm", _project = "core"}, _module = Name {_name = "List"}}) (Name {_name = "List"}) [TVar (Name {_name = "a"})]) (TType (Canonical {_package = Name {_author = "elm", _project = "core"}, _module = Name {_name = "List"}}) (Name {_name = "List"}) [TVar (Name {_name = "a"})])))) (At (Region {_start = Position {_line = 13, _column = 16}, _end = Position {_line = 13, _column = 19}}) (Call (At (Region {_start = Position {_line = 13, _column = 16}, _end = Position {_line = 13, _column = 17}}) (VarLocal (Name {_name = "f"}))) [At (Region {_start = Position {_line = 13, _column = 18}, _end = Position {_line = 13, _column = 19}}) (VarLocal (Name {_name = "h"}))])) (At (Region {_start = Position {_line = 13, _column = 25}, _end = Position {_line = 13, _column = 34}}) (Call (At (Region {_start = Position {_line = 13, _column = 25}, _end = Position {_line = 13, _column = 30}}) (VarTopLevel (Canonical {_package = Name {_author = "author", _project = "project"}, _module = Name {_name = "Main"}}) (Name {_name = "myMap"}))) [At (Region {_start = Position {_line = 13, _column = 31}, _end = Position {_line = 13, _column = 32}}) (VarLocal (Name {_name = "f"})),At (Region {_start = Position {_line = 13, _column = 33}, _end = Position {_line = 13, _column = 34}}) (VarLocal (Name {_name = "t"}))]))))]
Constraining exprssion VarLocal (Name {_name = "l"})
Instantiating Forall [] (TypeVar (Name {_name = "a"}) :@ SetVar_17) (CEqual_ (SetVar_ SetVar_17) (SetVar_ SetVar_66)) into (TypeVar (Name {_name = "a"}) :@ SetVar_17,(CEqual_ (SetVar_ SetVar_17) (SetVar_ SetVar_66))) for var l
Unifying typesApp (Canonical {_package = Name {_author = "elm", _project = "core"}, _module = Name {_name = "List"}}) (Name {_name = "List"}) [TypeVar (Name {_name = "a"}) :@ SetVar_20] :@ SetVar_21
  and TypeVar (Name {_name = "a"}) :@ SetVar_17
Constraining exprssion List []
Constraining exprssion Binop (Name {_name = "::"}) (Canonical {_package = Name {_author = "elm", _project = "core"}, _module = Name {_name = "List"}}) (Name {_name = "cons"}) (Forall (fromList [(Name {_name = "a"},())]) (TLambda (TVar (Name {_name = "a"})) (TLambda (TType (Canonical {_package = Name {_author = "elm", _project = "core"}, _module = Name {_name = "List"}}) (Name {_name = "List"}) [TVar (Name {_name = "a"})]) (TType (Canonical {_package = Name {_author = "elm", _project = "core"}, _module = Name {_name = "List"}}) (Name {_name = "List"}) [TVar (Name {_name = "a"})])))) (At (Region {_start = Position {_line = 13, _column = 16}, _end = Position {_line = 13, _column = 19}}) (Call (At (Region {_start = Position {_line = 13, _column = 16}, _end = Position {_line = 13, _column = 17}}) (VarLocal (Name {_name = "f"}))) [At (Region {_start = Position {_line = 13, _column = 18}, _end = Position {_line = 13, _column = 19}}) (VarLocal (Name {_name = "h"}))])) (At (Region {_start = Position {_line = 13, _column = 25}, _end = Position {_line = 13, _column = 34}}) (Call (At (Region {_start = Position {_line = 13, _column = 25}, _end = Position {_line = 13, _column = 30}}) (VarTopLevel (Canonical {_package = Name {_author = "author", _project = "project"}, _module = Name {_name = "Main"}}) (Name {_name = "myMap"}))) [At (Region {_start = Position {_line = 13, _column = 31}, _end = Position {_line = 13, _column = 32}}) (VarLocal (Name {_name = "f"})),At (Region {_start = Position {_line = 13, _column = 33}, _end = Position {_line = 13, _column = 34}}) (VarLocal (Name {_name = "t"}))]))
Constraining exprssion Call (At (Region {_start = Position {_line = 13, _column = 16}, _end = Position {_line = 13, _column = 17}}) (VarLocal (Name {_name = "f"}))) [At (Region {_start = Position {_line = 13, _column = 18}, _end = Position {_line = 13, _column = 19}}) (VarLocal (Name {_name = "h"}))]
Constraining exprssion VarLocal (Name {_name = "f"})
Instantiating Forall [] (TypeVar (Name {_name = "a"}) :@ SetVar_16) (CEqual_ (SetVar_ SetVar_16) (SetVar_ SetVar_64)) into (TypeVar (Name {_name = "a"}) :@ SetVar_16,(CEqual_ (SetVar_ SetVar_16) (SetVar_ SetVar_64))) for var f
Unifying typesFun (TypeVar (Name {_name = "a"}) :@ SetVar_30) (TypeVar (Name {_name = "b"}) :@ SetVar_31) :@ SetVar_32
  and TypeVar (Name {_name = "a"}) :@ SetVar_16
Constraining exprssion VarLocal (Name {_name = "h"})
Instantiating Forall [] (TypeVar (Name {_name = "a"}) :@ SetVar_25) (CEqual_ (SetVar_ SetVar_25) (SetVar_ projVar_71_1)) into (TypeVar (Name {_name = "a"}) :@ SetVar_25,(CEqual_ (SetVar_ SetVar_25) (SetVar_ projVar_71_1))) for var h
Unifying typesTypeVar (Name {_name = "a"}) :@ SetVar_34
  and TypeVar (Name {_name = "a"}) :@ SetVar_25
Constraining that argTy TypeVar (Name {_name = "a"}) :@ SetVar_25Smaller than TypeVar (Name {_name = "a"}) :@ SetVar_30
Function call At (Region {_start = Position {_line = 13, _column = 16}, _end = Position {_line = 13, _column = 17}}) (VarLocal (Name {_name = "f"}))
    generates constr (CAnd_ [(CSubset_ (SetVar_ SetVar_31) (SetVar_ SetVar_33)),(CEqual_ (SetVar_ SetVar_16) (SetVar_ SetVar_64)),(CEqual_ (SetVar_ SetVar_25) (SetVar_ projVar_71_1))])
Constraining exprssion Call (At (Region {_start = Position {_line = 13, _column = 25}, _end = Position {_line = 13, _column = 30}}) (VarTopLevel (Canonical {_package = Name {_author = "author", _project = "project"}, _module = Name {_name = "Main"}}) (Name {_name = "myMap"}))) [At (Region {_start = Position {_line = 13, _column = 31}, _end = Position {_line = 13, _column = 32}}) (VarLocal (Name {_name = "f"})),At (Region {_start = Position {_line = 13, _column = 33}, _end = Position {_line = 13, _column = 34}}) (VarLocal (Name {_name = "t"}))]
Constraining exprssion VarTopLevel (Canonical {_package = Name {_author = "author", _project = "project"}, _module = Name {_name = "Main"}}) (Name {_name = "myMap"})
Instantiating Forall [] (Fun (Fun (TypeVar (Name {_name = "a"}) :@ SetVar_62) (TypeVar (Name {_name = "b"}) :@ SetVar_63) :@ SetVar_64) (Fun (App (Canonical {_package = Name {_author = "elm", _project = "core"}, _module = Name {_name = "List"}}) (Name {_name = "List"}) [TypeVar (Name {_name = "a"}) :@ SetVar_65] :@ SetVar_66) (App (Canonical {_package = Name {_author = "elm", _project = "core"}, _module = Name {_name = "List"}}) (Name {_name = "List"}) [TypeVar (Name {_name = "b"}) :@ SetVar_60] :@ SetVar_61) :@ SetVar_68) :@ SetVar_67) (CTrue_) into (Fun (Fun (TypeVar (Name {_name = "a"}) :@ SetVar_62) (TypeVar (Name {_name = "b"}) :@ SetVar_63) :@ SetVar_64) (Fun (App (Canonical {_package = Name {_author = "elm", _project = "core"}, _module = Name {_name = "List"}}) (Name {_name = "List"}) [TypeVar (Name {_name = "a"}) :@ SetVar_65] :@ SetVar_66) (App (Canonical {_package = Name {_author = "elm", _project = "core"}, _module = Name {_name = "List"}}) (Name {_name = "List"}) [TypeVar (Name {_name = "b"}) :@ SetVar_60] :@ SetVar_61) :@ SetVar_68) :@ SetVar_67,(CTrue_)) for var myMap
Unifying typesFun (Fun (TypeVar (Name {_name = "a"}) :@ SetVar_35) (TypeVar (Name {_name = "b"}) :@ SetVar_36) :@ SetVar_37) (Fun (App (Canonical {_package = Name {_author = "elm", _project = "core"}, _module = Name {_name = "List"}}) (Name {_name = "List"}) [TypeVar (Name {_name = "a"}) :@ SetVar_38] :@ SetVar_39) (App (Canonical {_package = Name {_author = "elm", _project = "core"}, _module = Name {_name = "List"}}) (Name {_name = "List"}) [TypeVar (Name {_name = "b"}) :@ SetVar_40] :@ SetVar_41) :@ SetVar_42) :@ SetVar_43
  and Fun (Fun (TypeVar (Name {_name = "a"}) :@ SetVar_62) (TypeVar (Name {_name = "b"}) :@ SetVar_63) :@ SetVar_64) (Fun (App (Canonical {_package = Name {_author = "elm", _project = "core"}, _module = Name {_name = "List"}}) (Name {_name = "List"}) [TypeVar (Name {_name = "a"}) :@ SetVar_65] :@ SetVar_66) (App (Canonical {_package = Name {_author = "elm", _project = "core"}, _module = Name {_name = "List"}}) (Name {_name = "List"}) [TypeVar (Name {_name = "b"}) :@ SetVar_60] :@ SetVar_61) :@ SetVar_68) :@ SetVar_67
Constraining exprssion VarLocal (Name {_name = "f"})
Instantiating Forall [] (TypeVar (Name {_name = "a"}) :@ SetVar_16) (CEqual_ (SetVar_ SetVar_16) (SetVar_ SetVar_64)) into (TypeVar (Name {_name = "a"}) :@ SetVar_16,(CEqual_ (SetVar_ SetVar_16) (SetVar_ SetVar_64))) for var f
Unifying typesFun (TypeVar (Name {_name = "a"}) :@ SetVar_46) (TypeVar (Name {_name = "b"}) :@ SetVar_47) :@ SetVar_48
  and TypeVar (Name {_name = "a"}) :@ SetVar_16
Constraining exprssion VarLocal (Name {_name = "t"})
Instantiating Forall [] (TypeVar (Name {_name = "a"}) :@ SetVar_27) (CEqual_ (SetVar_ SetVar_27) (SetVar_ projVar_71_2)) into (TypeVar (Name {_name = "a"}) :@ SetVar_27,(CEqual_ (SetVar_ SetVar_27) (SetVar_ projVar_71_2))) for var t
Unifying typesApp (Canonical {_package = Name {_author = "elm", _project = "core"}, _module = Name {_name = "List"}}) (Name {_name = "List"}) [TypeVar (Name {_name = "a"}) :@ SetVar_49] :@ SetVar_50
  and TypeVar (Name {_name = "a"}) :@ SetVar_27
Constraining that argTy Fun (TypeVar (Name {_name = "a"}) :@ SetVar_46) (TypeVar (Name {_name = "b"}) :@ SetVar_47) :@ SetVar_16Smaller than Fun (TypeVar (Name {_name = "a"}) :@ SetVar_62) (TypeVar (Name {_name = "b"}) :@ SetVar_63) :@ SetVar_64
Constraining that argTy App (Canonical {_package = Name {_author = "elm", _project = "core"}, _module = Name {_name = "List"}}) (Name {_name = "List"}) [TypeVar (Name {_name = "a"}) :@ SetVar_49] :@ SetVar_27Smaller than App (Canonical {_package = Name {_author = "elm", _project = "core"}, _module = Name {_name = "List"}}) (Name {_name = "List"}) [TypeVar (Name {_name = "a"}) :@ SetVar_65] :@ SetVar_66
Function call At (Region {_start = Position {_line = 13, _column = 25}, _end = Position {_line = 13, _column = 30}}) (VarTopLevel (Canonical {_package = Name {_author = "author", _project = "project"}, _module = Name {_name = "Main"}}) (Name {_name = "myMap"}))
    generates constr (CAnd_ [(CSubset_ (SetVar_ SetVar_61) (SetVar_ SetVar_45)),(CEqual_ (SetVar_ SetVar_16) (SetVar_ SetVar_64)),(CEqual_ (SetVar_ SetVar_27) (SetVar_ projVar_71_2))])
Solving constraints for definition myMap
Got safety constraints [(CSubset_ (SetVar_ SetVar_17) (Union_ (Ctor_ "--Cons" [(Top_),(Top_)]) (Ctor_ "--Null" []))),(CImplies_ (CNot_ (CSubset_ (Intersect_ (SetVar_ SetVar_17) (Ctor_ "--Cons" [(Top_),(Top_)])) (Bottom_))) (CSubset_ (SetVar_ SetVar_25) (SetVar_ SetVar_30))),(CImplies_ (CNot_ (CSubset_ (Intersect_ (SetVar_ SetVar_17) (Ctor_ "--Cons" [(Top_),(Top_)])) (Bottom_))) (CSubset_ (SetVar_ SetVar_16) (SetVar_ SetVar_64))),(CImplies_ (CNot_ (CSubset_ (Intersect_ (SetVar_ SetVar_17) (Ctor_ "--Cons" [(Top_),(Top_)])) (Bottom_))) (CSubset_ (SetVar_ SetVar_27) (SetVar_ SetVar_66)))]
Flattened top level:
(CAnd_ [(CSubset_ (SetVar_ SetVar_61) (Union_ (SetVar_ SetVar_70) (SetVar_ SetVar_69))),(CImplies_ (CSubset_ (Intersect_ (SetVar_ SetVar_66) (Ctor_ "--Null" [])) (Bottom_)) (CEqual_ (SetVar_ SetVar_69) (Bottom_))),(CImplies_ (CNot_ (CSubset_ (Intersect_ (SetVar_ SetVar_66) (Ctor_ "--Null" [])) (Bottom_))) (CEqual_ (SetVar_ SetVar_69) (SetVar_ SetVar_24))),(CEqual_ (SetVar_ SetVar_24) (Ctor_ "--Null" [])),(CImplies_ (CSubset_ (Intersect_ (SetVar_ SetVar_66) (Ctor_ "--Cons" [(Top_),(Top_)])) (Bottom_)) (CEqual_ (SetVar_ SetVar_70) (Bottom_))),(CImplies_ (CNot_ (CSubset_ (Intersect_ (SetVar_ SetVar_66) (Ctor_ "--Cons" [(Top_),(Top_)])) (Bottom_))) (CEqual_ (SetVar_ SetVar_70) (SetVar_ SetVar_29))),(CEqual_ (Ctor_ "--Cons" [(SetVar_ projVar_71_1),(SetVar_ projVar_71_2)]) (Intersect_ (SetVar_ SetVar_66) (Ctor_ "--Cons" [(Top_),(Top_)]))),(CIff_ (CEqual_ (SetVar_ projVar_71_1) (Bottom_)) (CEqual_ (Intersect_ (SetVar_ SetVar_66) (Ctor_ "--Cons" [(Top_),(Top_)])) (Bottom_))),(CIff_ (CEqual_ (SetVar_ projVar_71_2) (Bottom_)) (CEqual_ (Intersect_ (SetVar_ SetVar_66) (Ctor_ "--Cons" [(Top_),(Top_)])) (Bottom_))),(CEqual_ (SetVar_ SetVar_29) (Ctor_ "--Cons" [(SetVar_ SetVar_33),(SetVar_ SetVar_45)])),(CSubset_ (SetVar_ SetVar_31) (SetVar_ SetVar_33)),(CSubset_ (SetVar_ SetVar_61) (SetVar_ SetVar_45)),(CSubset_ (SetVar_ SetVar_66) (Union_ (Ctor_ "--Cons" [(Top_),(Top_)]) (Ctor_ "--Null" []))),(CImplies_ (CNot_ (CSubset_ (Intersect_ (SetVar_ SetVar_66) (Ctor_ "--Cons" [(Top_),(Top_)])) (Bottom_))) (CSubset_ (SetVar_ projVar_71_1) (SetVar_ SetVar_30))),(CImplies_ (CNot_ (CSubset_ (Intersect_ (SetVar_ SetVar_66) (Ctor_ "--Cons" [(Top_),(Top_)])) (Bottom_))) (CSubset_ (SetVar_ SetVar_64) (SetVar_ SetVar_64))),(CImplies_ (CNot_ (CSubset_ (Intersect_ (SetVar_ SetVar_66) (Ctor_ "--Cons" [(Top_),(Top_)])) (Bottom_))) (CSubset_ (SetVar_ projVar_71_2) (SetVar_ SetVar_66)))])

Solving pattern match constraints
Found Solution
Solved Pattern Match constraints
Generalized type for myMap is Forall [SetVar_67,SetVar_64,SetVar_68,SetVar_61,SetVar_70,SetVar_69,SetVar_24,projVar_71_1,projVar_71_2,SetVar_66,SetVar_29,SetVar_33,SetVar_45,SetVar_31] (Fun (Fun (TypeVar (Name {_name = "a"}) :@ SetVar_62) (TypeVar (Name {_name = "b"}) :@ SetVar_63) :@ SetVar_64) (Fun (App (Canonical {_package = Name {_author = "elm", _project = "core"}, _module = Name {_name = "List"}}) (Name {_name = "List"}) [TypeVar (Name {_name = "a"}) :@ SetVar_65] :@ SetVar_66) (App (Canonical {_package = Name {_author = "elm", _project = "core"}, _module = Name {_name = "List"}}) (Name {_name = "List"}) [TypeVar (Name {_name = "b"}) :@ SetVar_60] :@ SetVar_61) :@ SetVar_68) :@ SetVar_67) (CAnd_ [(CSubset_ (SetVar_ SetVar_61) (Union_ (SetVar_ SetVar_70) (SetVar_ SetVar_69))),(CImplies_ (CSubset_ (Intersect_ (SetVar_ SetVar_66) (Ctor_ "--Null" [])) (Bottom_)) (CEqual_ (SetVar_ SetVar_69) (Bottom_))),(CImplies_ (CNot_ (CSubset_ (Intersect_ (SetVar_ SetVar_66) (Ctor_ "--Null" [])) (Bottom_))) (CEqual_ (SetVar_ SetVar_69) (SetVar_ SetVar_24))),(CEqual_ (SetVar_ SetVar_24) (Ctor_ "--Null" [])),(CImplies_ (CSubset_ (Intersect_ (SetVar_ SetVar_66) (Ctor_ "--Cons" [(Top_),(Top_)])) (Bottom_)) (CEqual_ (SetVar_ SetVar_70) (Bottom_))),(CImplies_ (CNot_ (CSubset_ (Intersect_ (SetVar_ SetVar_66) (Ctor_ "--Cons" [(Top_),(Top_)])) (Bottom_))) (CEqual_ (SetVar_ SetVar_70) (SetVar_ SetVar_29))),(CEqual_ (Ctor_ "--Cons" [(SetVar_ projVar_71_1),(SetVar_ projVar_71_2)]) (Intersect_ (SetVar_ SetVar_66) (Ctor_ "--Cons" [(Top_),(Top_)]))),(CIff_ (CEqual_ (SetVar_ projVar_71_1) (Bottom_)) (CEqual_ (Intersect_ (SetVar_ SetVar_66) (Ctor_ "--Cons" [(Top_),(Top_)])) (Bottom_))),(CIff_ (CEqual_ (SetVar_ projVar_71_2) (Bottom_)) (CEqual_ (Intersect_ (SetVar_ SetVar_66) (Ctor_ "--Cons" [(Top_),(Top_)])) (Bottom_))),(CEqual_ (SetVar_ SetVar_29) (Ctor_ "--Cons" [(SetVar_ SetVar_33),(SetVar_ SetVar_45)])),(CSubset_ (SetVar_ SetVar_31) (SetVar_ SetVar_33)),(CSubset_ (SetVar_ SetVar_61) (SetVar_ SetVar_45)),(CSubset_ (SetVar_ SetVar_66) (Union_ (Ctor_ "--Cons" [(Top_),(Top_)]) (Ctor_ "--Null" []))),(CImplies_ (CNot_ (CSubset_ (Intersect_ (SetVar_ SetVar_66) (Ctor_ "--Cons" [(Top_),(Top_)])) (Bottom_))) (CSubset_ (SetVar_ projVar_71_1) (SetVar_ SetVar_30))),(CImplies_ (CNot_ (CSubset_ (Intersect_ (SetVar_ SetVar_66) (Ctor_ "--Cons" [(Top_),(Top_)])) (Bottom_))) (CSubset_ (SetVar_ SetVar_64) (SetVar_ SetVar_64))),(CImplies_ (CNot_ (CSubset_ (Intersect_ (SetVar_ SetVar_66) (Ctor_ "--Cons" [(Top_),(Top_)])) (Bottom_))) (CSubset_ (SetVar_ projVar_71_2) (SetSubbing in else CAnd_ [(CSubset_ (SetVar_ SetVar_72) (Union_ (SetVar_ SetVar_77) (SetVar_ SetVar_75))),(CImplies_ (CSubset_ (Intersect_ (SetVar_ SetVar_73) (Ctor_ "Bar" [])) (Bottom_)) (CEqual_ (SetVar_ SetVar_75) (Bottom_))),(CImplies_ (CNot_ (CSubset_ (Intersect_ (SetVar_ SetVar_73) (Ctor_ "Bar" [])) (Bottom_))) (CEqual_ (SetVar_ SetVar_75) (SetVar_ SetVar_7))),(CEqual_ (Ctor_ "--_0" []) (SetVar_ SetVar_7)),(CEqual_ (Ctor_ "Bar" []) (Intersect_ (SetVar_ SetVar_73) (Ctor_ "Bar" []))),(CImplies_ (CSubset_ (Intersect_ (SetVar_ SetVar_73) (Ctor_ "Baz" [])) (Bottom_)) (CEqual_ (SetVar_ SetVar_77) (Bottom_))),(CImplies_ (CNot_ (CSubset_ (Intersect_ (SetVar_ SetVar_73) (Ctor_ "Baz" [])) (Bottom_))) (CEqual_ (SetVar_ SetVar_77) (SetVar_ SetVar_9))),(CEqual_ (Ctor_ "--_1" []) (SetVar_ SetVar_9)),(CEqual_ (Ctor_ "Baz" []) (Intersect_ (SetVar_ SetVar_73) (Ctor_ "Baz" []))),(CSubset_ (SetVar_ SetVar_73) (Union_ (Ctor_ "Baz" []) (Ctor_ "Bar" [])))]
Subbing in subset (CSubset_ (SetVar_ SetVar_72) (Union_ (SetVar_ SetVar_77) (SetVar_ SetVar_75)))
Subbing in lit var (SetVar_ SetVar_72)
Subbing in lit else Union_ (SetVar_ SetVar_77) (SetVar_ SetVar_75)
Subbing in lit var (SetVar_ SetVar_77)
Subbing in lit var (SetVar_ SetVar_75)
Subbing in else CImplies_ (CSubset_ (Intersect_ (SetVar_ SetVar_73) (Ctor_ "Bar" [])) (Bottom_)) (CEqual_ (SetVar_ SetVar_75) (Bottom_))
Subbing in subset (CSubset_ (Intersect_ (SetVar_ SetVar_73) (Ctor_ "Bar" [])) (Bottom_))
Subbing in lit else Intersect_ (SetVar_ SetVar_73) (Ctor_ "Bar" [])
Subbing in lit var (SetVar_ SetVar_73)
Subbing in lit else Ctor_ "Bar" []
Subbing in lit else Bottom_
Subbing in equal (CEqual_ (SetVar_ SetVar_75) (Bottom_))
Subbing in lit var (SetVar_ SetVar_75)
Subbing in lit else Bottom_
Subbing in else CImplies_ (CNot_ (CSubset_ (Intersect_ (SetVar_ SetVar_73) (Ctor_ "Bar" [])) (Bottom_))) (CEqual_ (SetVar_ SetVar_75) (SetVar_ SetVar_7))
Subbing in else CNot_ (CSubset_ (Intersect_ (SetVar_ SetVar_73) (Ctor_ "Bar" [])) (Bottom_))
Subbing in subset (CSubset_ (Intersect_ (SetVar_ SetVar_73) (Ctor_ "Bar" [])) (Bottom_))
Subbing in lit else Intersect_ (SetVar_ SetVar_73) (Ctor_ "Bar" [])
Subbing in lit var (SetVar_ SetVar_73)
Subbing in lit else Ctor_ "Bar" []
Subbing in lit else Bottom_
Subbing in equal (CEqual_ (SetVar_ SetVar_75) (SetVar_ SetVar_7))
Subbing in lit var (SetVar_ SetVar_75)
Subbing in lit var (SetVar_ SetVar_7)
Subbing in equal (CEqual_ (Ctor_ "--_0" []) (SetVar_ SetVar_7))
Subbing in lit else Ctor_ "--_0" []
Subbing in lit var (SetVar_ SetVar_7)
Subbing in equal (CEqual_ (Ctor_ "Bar" []) (Intersect_ (SetVar_ SetVar_73) (Ctor_ "Bar" [])))
Subbing in lit else Ctor_ "Bar" []
Subbing in lit else Intersect_ (SetVar_ SetVar_73) (Ctor_ "Bar" [])
Subbing in lit var (SetVar_ SetVar_73)
Subbing in lit else Ctor_ "Bar" []
Subbing in else CImplies_ (CSubset_ (Intersect_ (SetVar_ SetVar_73) (Ctor_ "Baz" [])) (Bottom_)) (CEqual_ (SetVar_ SetVar_77) (Bottom_))
Subbing in subset (CSubset_ (Intersect_ (SetVar_ SetVar_73) (Ctor_ "Baz" [])) (Bottom_))
Subbing in lit else Intersect_ (SetVar_ SetVar_73) (Ctor_ "Baz" [])
Subbing in lit var (SetVar_ SetVar_73)
Subbing in lit else Ctor_ "Baz" []
Subbing in lit else Bottom_
Subbing in equal (CEqual_ (SetVar_ SetVar_77) (Bottom_))
Subbing in lit var (SetVar_ SetVar_77)
Subbing in lit else Bottom_
Subbing in else CImplies_ (CNot_ (CSubset_ (Intersect_ (SetVar_ SetVar_73) (Ctor_ "Baz" [])) (Bottom_))) (CEqual_ (SetVar_ SetVar_77) (SetVar_ SetVar_9))
Subbing in else CNot_ (CSubset_ (Intersect_ (SetVar_ SetVar_73) (Ctor_ "Baz" [])) (Bottom_))
Subbing in subset (CSubset_ (Intersect_ (SetVar_ SetVar_73) (Ctor_ "Baz" [])) (Bottom_))
Subbing in lit else Intersect_ (SetVar_ SetVar_73) (Ctor_ "Baz" [])
Subbing in lit var (SetVar_ SetVar_73)
Subbing in lit else Ctor_ "Baz" []
Subbing in lit else Bottom_
Subbing in equal (CEqual_ (SetVar_ SetVar_77) (SetVar_ SetVar_9))
Subbing in lit var (SetVar_ SetVar_77)
Subbing in lit var (SetVar_ SetVar_9)
Subbing in equal (CEqual_ (Ctor_ "--_1" []) (SetVar_ SetVar_9))
Subbing in lit else Ctor_ "--_1" []
Subbing in lit var (SetVar_ SetVar_9)
Subbing in equal (CEqual_ (Ctor_ "Baz" []) (Intersect_ (SetVar_ SetVar_73) (Ctor_ "Baz" [])))
Subbing in lit else Ctor_ "Baz" []
Subbing in lit else Intersect_ (SetVar_ SetVar_73) (Ctor_ "Baz" [])
Subbing in lit var (SetVar_ SetVar_73)
Subbing in lit else Ctor_ "Baz" []
Subbing in subset (CSubset_ (SetVar_ SetVar_73) (Union_ (Ctor_ "Baz" []) (Ctor_ "Bar" [])))
Subbing in lit var (SetVar_ SetVar_73)
Subbing in lit else Union_ (Ctor_ "Baz" []) (Ctor_ "Bar" [])
Subbing in lit else Ctor_ "Baz" []
Subbing in lit else Ctor_ "Bar" []
Var_ SetVar_66)))])
Constraining exprssion Case (At (Region {_start = Position {_line = 4, _column = 17}, _end = Position {_line = 4, _column = 18}}) (VarLocal (Name {_name = "x"}))) [CaseBranch (At (Region {_start = Position {_line = 5, _column = 3}, _end = Position {_line = 5, _column = 6}}) (PCtor {_p_home = Canonical {_package = Name {_author = "author", _project = "project"}, _module = Name {_name = "Main"}}, _p_type = Name {_name = "Foo"}, _p_union = UNION, _p_name = Name {_name = "Bar"}, _p_index = ZB, _p_args = []})) (At (Region {_start = Position {_line = 5, _column = 10}, _end = Position {_line = 5, _column = 11}}) (Int 0)),CaseBranch (At (Region {_start = Position {_line = 6, _column = 3}, _end = Position {_line = 6, _column = 6}}) (PCtor {_p_home = Canonical {_package = Name {_author = "author", _project = "project"}, _module = Name {_name = "Main"}}, _p_type = Name {_name = "Foo"}, _p_union = UNION, _p_name = Name {_name = "Baz"}, _p_index = ZB, _p_args = []})) (At (Region {_start = Position {_line = 6, _column = 10}, _end = Position {_line = 6, _column = 11}}) (Int 1))]
Constraining exprssion VarLocal (Name {_name = "x"})
Instantiating Forall [] (TypeVar (Name {_name = "a"}) :@ SetVar_3) (CEqual_ (SetVar_ SetVar_3) (SetVar_ SetVar_73)) into (TypeVar (Name {_name = "a"}) :@ SetVar_3,(CEqual_ (SetVar_ SetVar_3) (SetVar_ SetVar_73))) for var x
Unifying typesApp (Canonical {_package = Name {_author = "author", _project = "project"}, _module = Name {_name = "Main"}}) (Name {_name = "Foo"}) [] :@ SetVar_5
  and TypeVar (Name {_name = "a"}) :@ SetVar_3
Constraining exprssion Int 0
Constraining exprssion Int 1
Solving constraints for definition fooFun
Got safety constraints [(CSubset_ (SetVar_ SetVar_3) (Union_ (Ctor_ "Baz" []) (Ctor_ "Bar" [])))]
Flattened top level:
(CAnd_ [(CSubset_ (SetVar_ SetVar_72) (Union_ (SetVar_ SetVar_77) (SetVar_ SetVar_75))),(CImplies_ (CSubset_ (Intersect_ (SetVar_ SetVar_73) (Ctor_ "Bar" [])) (Bottom_)) (CEqual_ (SetVar_ SetVar_75) (Bottom_))),(CImplies_ (CNot_ (CSubset_ (Intersect_ (SetVar_ SetVar_73) (Ctor_ "Bar" [])) (Bottom_))) (CEqual_ (SetVar_ SetVar_75) (SetVar_ SetVar_7))),(CEqual_ (Ctor_ "--_0" []) (SetVar_ SetVar_7)),(CEqual_ (Ctor_ "Bar" []) (Intersect_ (SetVar_ SetVar_73) (Ctor_ "Bar" []))),(CImplies_ (CSubset_ (Intersect_ (SetVar_ SetVar_73) (Ctor_ "Baz" [])) (Bottom_)) (CEqual_ (SetVar_ SetVar_77) (Bottom_))),(CImplies_ (CNot_ (CSubset_ (Intersect_ (SetVar_ SetVar_73) (Ctor_ "Baz" [])) (Bottom_))) (CEqual_ (SetVar_ SetVar_77) (SetVar_ SetVar_9))),(CEqual_ (Ctor_ "--_1" []) (SetVar_ SetVar_9)),(CEqual_ (Ctor_ "Baz" []) (Intersect_ (SetVar_ SetVar_73) (Ctor_ "Baz" []))),(CSubset_ (SetVar_ SetVar_73) (Union_ (Ctor_ "Baz" []) (Ctor_ "Bar" [])))])

Solving pattern match constraints
Found Solution
Solved Pattern Match constraints
Generalized type for fooFun is Forall [SetVar_74,SetVar_73,SetVar_72,SetVar_77,SetVar_75,SetVar_7,SetVar_9] (Fun (App (Canonical {_package = Name {_author = "author", _project = "project"}, _module = Name {_name = "Main"}}) (Name {_name = "Foo"}) [] :@ SetVar_73) (App (Canonical {_package = Name {_author = "elm", _project = "core"}, _module = Name {_name = "Basics"}}) (Name {_name = "Int"}) [] :@ SetVar_72) :@ SetVar_74) (CAnd_ [(CSubset_ (SetVar_ SetVar_72) (Union_ (SetVar_ SetVar_77) (SetVar_ SetVar_75))),(CImplies_ (CSubset_ (Intersect_ (SetVar_ SetVar_73) (Ctor_ "Bar" [])) (Bottom_)) (CEqual_ (SetVar_ SetVar_75) (Bottom_))),(CImplies_ (CNot_ (CSubset_ (Intersect_ (SetVar_ SetVar_73) (Ctor_ "Bar" [])) (Bottom_))) (CEqual_ (SetVar_ SetVar_75) (SetVar_ SetVar_7))),(CEqual_ (Ctor_ "--_0" []) (SetVar_ SetVar_7)),(CEqual_ (Ctor_ "Bar" []) (Intersect_ (SetVar_ SetVar_73) (Ctor_ "Bar" []))),(CImplies_ (CSubset_ (Intersect_ (SetVar_ SetVar_73) (Ctor_ "Baz" [])) (Bottom_)) (CEqual_ (SetVar_ SetVar_77) (Bottom_))),(CImplies_ (CNot_ (CSubset_ (Intersect_ (SetVar_ SetVar_73) (Ctor_ "Baz" [])) (Bottom_))) (CEqual_ (SetVar_ SetVar_77) (SetVar_ SetVar_9))),(CEqual_ (Ctor_ "--_1" []) (SetVar_ SetVar_9)),(CEqual_ (Ctor_ "Baz" []) (Intersect_ (SetVar_ SetVar_73) (Ctor_ "Baz" []))),(CSubset_ (SetVar_ SetVar_73) (Union_ (Ctor_ "Baz" []) (Ctor_ "Bar" [])))])
Constraining exprssion Call (At (Region {_start = Position {_line = 8, _column = 13}, _end = Position {_line = 8, _column = 19}}) (VarTopLevel (Canonical {_package = Name {_author = "author", _project = "project"}, _module = Name {_name = "Main"}}) (Name {_name = "fooFun"}))) [At (Region {_start = Position {_line = 8, _column = 20}, _end = Position {_line = 8, _column = 23}}) (VarCtor Enum (Canonical {_package = Name {_author = "author", _project = "project"}, _module = Name {_name = "Main"}}) (Name {_name = "Baz"}) ZB (Forall (fromList []) (TType (Canonical {_package = Name {_author = "author", _project = "project"}, _module = Name {_name = "Main"}}) (Name {_name = "Foo"}) [])))]
Constraining exprssion VarTopLevel (Canonical {_package = Name {_author = "author", _project = "project"}, _module = Name {_name = "Main"}}) (Name {_name = "fooFun"})
Instantiating with SubList[(SetVar_74,SetVar_79),(SetVar_73,SetVar_80),(SetVar_72,SetVar_81),(SetVar_77,SetVar_82),(SetVar_75,SetVar_83),(SetVar_7,SetVar_84),(SetVar_9,SetVar_85)]
Replacing SetVar_73 with SetVar_80
Replacing SetVar_72 with SetVar_81
Replacing SetVar_74 with SetVar_79
Replacing SetVar_72 with SetVar_81
Replacing SetVar_77 with SetVar_82
Replacing SetVar_75 with SetVar_83
Replacing SetVar_73 with SetVar_80
Replacing SetVar_75 with SetVar_83
Replacing SetVar_73 with SetVar_80
Replacing SetVar_75 with SetVar_83
Replacing SetVar_7 with SetVar_84
Instantiating Forall [SetVar_74,SetVar_73,SetVar_72,SetVar_77,SetVar_75,SetVar_7,SetVar_9] (Fun (App (Canonical {_package = Name {_author = "author", _project = "project"}, _module = Name {_name = "Main"}}) (Name {_name = "Foo"}) [] :@ SetVar_73) (App (Canonical {_package = Name {_author = "elm", _project = "core"}, _module = Name {_name = "Basics"}}) (Name {_name = "Int"}) [] :@ SetVar_72) :@ SetVar_74) (CAnd_ [(CSubset_ (SetVar_ SetVar_72) (Union_ (SetVar_ SetVar_77) (SetVar_ SetVar_75))),(CImplies_ (CSubset_ (Intersect_ (SetVar_ SetVar_73) (Ctor_ "Bar" [])) (Bottom_)) (CEqual_ (SetVar_ SetVar_75) (Bottom_))),(CImplies_ (CNot_ (CSubset_ (Intersect_ (SetVar_ SetVar_73) (Ctor_ "Bar" [])) (Bottom_))) (CEqual_ (SetVar_ SetVar_75) (SetVar_ SetVar_7))),(CEqual_ (Ctor_ "--_0" []) (SetVar_ SetVar_7)),(CEqual_ (Ctor_ "Bar" []) (Intersect_ (SetVar_ SetVar_73) (Ctor_ "Bar" []))),(CImplies_ (CSubset_ (Intersect_ (SetVar_ SetVar_73) (Ctor_ "Baz" [])) (Bottom_)) (CEqual_ (SetVar_ SetVar_77) (Bottom_))),(CImplies_ (CNot_ (CSubset_ (Intersect_ (SetVar_ SetVar_73) (Ctor_ "Baz" [])) (Bottom_))) (CEqual_ (SetVar_ SetVar_77) (SetVar_ SetVar_9))),(CEqual_ (Ctor_ "--_1" []) (SetVar_ SetVar_9)),(CEqual_ (Ctor_ "Baz" []) (Intersect_ (SetVar_ SetVar_73) (Ctor_ "Baz" []))),(CSubset_ (SetVar_ SetVar_73) (Union_ (Ctor_ "Baz" []) (Ctor_ "Bar" [])))]) into (Fun (App (Canonical {_package = Name {_author = "author", _project = "project"}, _module = Name {_name = "Main"}}) (Name {_name = "Foo"}) [] :@ SetVar_80) (App (Canonical {_package = Name {_author = "elm", _project = "core"}, _module = Name {_name = "Basics"}}) (Name {_name = "Int"}) [] :@ SetVar_81) :@ SetVar_79,(CAnd_ [(CSubset_ (SetVar_ SetVar_81) (Union_ (SetVar_ SetVar_82) (SetVar_ SetVar_83))),(CImplies_ (CSubset_ (Intersect_ (SetVar_ SetVar_80) (Ctor_ "Bar" [])) (Bottom_)) (CEqual_ (SetVar_ SetVar_83) (Bottom_))),(CImplies_ (CNot_ (CSubset_ (Intersect_ (SetVar_ SetVar_80) (Ctor_ "Bar" [])) (Bottom_))) (CEqual_ (SetVar_ SetVar_83) (SetVar_ SetVar_84))),(CEqual_ (Ctor_ "--_0" []) (Replacing SetVar_7 with SetVar_84
Replacing SetVar_73 with SetVar_80
Replacing SetVar_73 with SetVar_80
Replacing SetVar_77 with SetVar_82
Replacing SetVar_73 with SetVar_80
Replacing SetVar_77 with SetVar_82
Replacing SetVar_9 with SetVar_85
Replacing SetVar_9 with SetVar_85
Replacing SetVar_73 with SetVar_80
Replacing SetVar_73 with SetVar_80
SetVar_ SetVar_84)),(CEqual_ (Ctor_ "Bar" []) (Intersect_ (SetVar_ SetVar_80) (Ctor_ "Bar" []))),(CImplies_ (CSubset_ (Intersect_ (SetVar_ SetVar_80) (Ctor_ "Baz" [])) (Bottom_)) (CEqual_ (SetVar_ SetVar_82) (Bottom_))),(CImplies_ (CNot_ (CSubset_ (Intersect_ (SetVar_ SetVar_80) (Ctor_ "Baz" [])) (Bottom_))) (CEqual_ (SetVar_ SetVar_82) (SetVar_ SetVar_85))),(CEqual_ (Ctor_ "--_1" []) (SetVar_ SetVar_85)),(CEqual_ (Ctor_ "Baz" []) (Intersect_ (SetVar_ SetVar_80) (Ctor_ "Baz" []))),(CSubset_ (SetVar_ SetVar_80) (Union_ (Ctor_ "Baz" []) (Ctor_ "Bar" [])))])) for var fooFun
Unifying typesFun (App (Canonical {_package = Name {_author = "author", _project = "project"}, _module = Name {_name = "Main"}}) (Name {_name = "Foo"}) [] :@ SetVar_11) (App (Canonical {_package = Name {_author = "elm", _project = "core"}, _module = Name {_name = "Basics"}}) (Name {_name = "Int"}) [] :@ SetVar_12) :@ SetVar_13
  and Fun (App (Canonical {_package = Name {_author = "author", _project = "project"}, _module = Name {_name = "Main"}}) (Name {_name = "Foo"}) [] :@ SetVar_80) (App (Canonical {_package = Name {_author = "elm", _project = "core"}, _module = Name {_name = "Basics"}}) (Name {_name = "Int"}) [] :@ SetVar_81) :@ SetVar_79
Constraining exprssion VarCtor Enum (Canonical {_package = Name {_author = "author", _project = "project"}, _module = Name {_name = "Main"}}) (Name {_name = "Baz"}) ZB (Forall (fromList []) (TType (Canonical {_package = Name {_author = "author", _project = "project"}, _module = Name {_name = "Main"}}) (Name {_name = "Foo"}) []))
Constraining that argTy App (Canonical {_package = Name {_author = "author", _project = "project"}, _module = Name {_name = "Main"}}) (Name {_name = "Foo"}) [] :@ SetVar_15Smaller than App (Canonical {_package = Name {_author = "author", _project = "project"}, _module = Name {_name = "Main"}}) (Name {_name = "Foo"}) [] :@ SetVar_80
Function call At (Region {_start = Position {_line = 8, _column = 13}, _end = Position {_line = 8, _column = 19}}) (VarTopLevel (Canonical {_package = Name {_author = "author", _project = "project"}, _module = Name {_name = "Main"}}) (Name {_name = "fooFun"}))
    generates constr (CAnd_ [(CSubset_ (SetVar_ SetVar_81) (SetVar_ SetVar_14)),(CSubset_ (SetVar_ SetVar_81) (Union_ (SetVar_ SetVar_82) (SetVar_ SetVar_83))),(CImplies_ (CSubset_ (Intersect_ (SetVar_ SetVar_80) (Ctor_ "Bar" [])) (Bottom_)) (CEqual_ (SetVar_ SetVar_83) (Bottom_))),(CImplies_ (CNot_ (CSubset_ (Intersect_ (SetVar_ SetVar_80) (Ctor_ "Bar" [])) (Bottom_))) (CEqual_ (SetVar_ SetVar_83) (SetVar_ SetVar_84))),(CEqual_ (Ctor_ "--_0" []) (SetVar_ SetVar_84)),(CEqual_ (Ctor_ "Bar" []) (Intersect_ (SetVar_ SetVar_80) (Ctor_ "Bar" []))),(CImplies_ (CSubset_ (Intersect_ (SetVar_ SetVar_80) (Ctor_ "Baz" [])) (Bottom_)) (CEqual_ (SetVar_ SetVar_82) (Bottom_))),(CImplies_ (CNot_ (CSubset_ (Intersect_ (SetVar_ SetVar_80) (Ctor_ "Baz" [])) (Bottom_))) (CEqual_ (SetVar_ SetVar_82) (SetVar_ SetVar_85))),(CEqual_ (Ctor_ "--_1" []) (SetVar_ SetVar_85)),(CEqual_ (Ctor_ "Baz" []) (Intersect_ (SetVar_ SetVar_80) (Ctor_ "Baz" []))),(CSubset_ (SetVar_ SetVar_80) (Union_ (Ctor_ "Baz" []) (Ctor_ "Bar" []))),(CEqual_ (SetVar_ SetVar_15) (Ctor_ "Baz" []))])
Solving constraints for definition fooFunApp
Got safety constraints [(CSubset_ (SetVar_ SetVar_15) (SetVar_ SetVar_80))]
Flattened top level:
(CAnd_ [(CSubset_ (SetVar_ SetVar_81) (SetVar_ SetVar_10)),(CSubset_ (SetVar_ SetVar_81) (Union_ (SetVar_ SetVar_82) (SetVar_ SetVar_83))),(CImplies_ (CSubset_ (Intersect_ (SetVar_ SetVar_80) (Ctor_ "Bar" [])) (Bottom_)) (CEqual_ (SetVar_ SetVar_83) (Bottom_))),(CImplies_ (CNot_ (CSubset_ (Intersect_ (SetVar_ SetVar_80) (Ctor_ "Bar" [])) (Bottom_))) (CEqual_ (SetVar_ SetVar_83) (SetVar_ SetVar_84))),(CEqual_ (Ctor_ "--_0" []) (SetVar_ SetVar_84)),(CEqual_ (Ctor_ "Bar" []) (Intersect_ (SetVar_ SetVar_80) (Ctor_ "Bar" []))),(CImplies_ (CSubset_ (Intersect_ (SetVar_ SetVar_80) (Ctor_ "Baz" [])) (Bottom_)) (CEqual_ (SetVar_ SetVar_82) (Bottom_))),(CImplies_ (CNot_ (CSubset_ (Intersect_ (SetVar_ SetVar_80) (Ctor_ "Baz" [])) (Bottom_))) (CEqual_ (SetVar_ SetVar_82) (SetVar_ SetVar_85))),(CEqual_ (Ctor_ "--_1" []) (SetVar_ SetVar_85)),(CEqual_ (Ctor_ "Baz" []) (Intersect_ (SetVar_ SetVar_80) (Ctor_ "Baz" []))),(CSubset_ (SetVar_ SetVar_80) (Union_ (Ctor_ "Baz" []) (Ctor_ "Bar" []))),(CEqual_ (SetVar_ SetVar_15) (Ctor_ "Baz" [])),(CSubset_ (SetVar_ SetVar_15) (SetVar_ SetVar_80))])

Solving pattern match constraints
Found Solution
Solved Pattern Match constraints
Generalized type for fooFunApp is Forall [SetVar_10,SetVar_81,SetVar_82,SetVar_83,SetVar_84,SetVar_80,SetVar_85,SetVar_15] (App (Canonical {_package = Name {_author = "elm", _project = "core"}, _module = Name {_name = "Basics"}}) (Name {_name = "Int"}) [] :@ SetVar_10) (CAnd_ [(CSubset_ (SetVar_ SetVar_81) (SetVar_ SetVar_10)),(CSubset_ (SetVar_ SetVar_81) (Union_ (SetVar_ SetVar_82) (SetVar_ SetVar_83))),(CImplies_ (CSubset_ (Intersect_ (SetVar_ SetVar_80) (Ctor_ "Bar" [])) (Bottom_)) (CEqual_ (SetVar_ SetVar_83) (Bottom_))),(CImplies_ (CNot_ (CSubset_ (Intersect_ (SetVar_ SetVar_80) (Ctor_ "Bar" [])) (Bottom_))) (CEqual_ (SetVar_ SetVar_83) (SetVar_ SetVar_84))),(CEqual_ (Ctor_ "--_0" []) (SetVar_ SetVar_84)),(CEqual_ (Ctor_ "Bar" []) (Intersect_ (SetVar_ SetVar_80) (Ctor_ "Bar" []))),(CImplies_ (CSubset_ (Intersect_ (SetVar_ SetVar_80) (Ctor_ "Baz" [])) (Bottom_)) (CEqual_ (SetVar_ SetVar_82) (Bottom_))),(CImplies_ (CNot_ (CSubset_ (Intersect_ (SetVar_ SetVar_80) (Ctor_ "Baz" [])) (Bottom_))) (CEqual_ (SetVar_ SetVar_82) (SetVar_ SetVar_85))),(CEqual_ (Ctor_ "--_1" []) (SetVar_ SetVar_85)),(CEqual_ (Ctor_ "Baz" []) (Intersect_ (SetVar_ SetVar_80) (Ctor_ "Baz" []))),(CSubset_ (SetVar_ SetVar_80) (Union_ (Ctor_ "Baz" []) (Ctor_ "Bar" []))),(CEqual_ (SetVar_ SetVar_15) (Ctor_ "Baz" [])),(CSubset_ (SetVar_ SetVar_15) (SetVar_ SetVar_80))])
[==================================================] - 1 / 1                                                                     Success! Compiled 1 module.
